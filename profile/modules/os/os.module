<?php

/**
 * @file
 * Hook implementations for the os module.
 */

use Drupal\bibcite_entity\Entity\ReferenceInterface;
use Drupal\block_content\BlockContentInterface;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\media\MediaInterface;
use Ds\Map;

/**
 * Implements hook_library_info_alter().
 */
function os_library_info_alter(&$libraries, $extension) {
  if ($extension == 'core') {
    return;
  }

  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');

  // Filter out themes and profiles or whatever. only modules.
  if (!$moduleHandler->moduleExists($extension)) {
    return;
  }
  $path = drupal_get_path('module', $extension);

  foreach ($libraries as $name => &$lib) {
    if (isset($lib['paths'])) {
      if (strpos($lib['paths'], '/') === 0) {
        $lib['drupalSettings']['paths'][$name] = ltrim($lib['paths'], '/') . '/';
      }
      else {
        $lib['drupalSettings']['paths'][$name] = $path . '/' . $lib['paths'] . '/';
      }
    }
  }
}

/**
 * Implements hook_preprocess_html().
 *
 * Always set the app.
 * Nothing will happen if there are no angularjs files on the page.
 */
function os_preprocess_html(&$variables) {
  $variables['attributes']['ng-app'] = 'openscholar';
}

/**
 * Implements hook_preprocess_block().
 *
 * Replaces 'Drupal' with 'OpenScholar' in the powered by block.
 *
 * @see \Drupal\Core\Routing\RedirectDestination::get()
 */
function os_preprocess_block(array &$vars) {
  if (isset($vars['plugin_id']) && $vars['plugin_id'] == 'system_powered_by_block') {
    $vars['content']['#markup'] = '';
    $vars['#cache']['contexts'][] = 'user.roles:anonymous';

    if (\Drupal::currentUser()->isAnonymous()) {
      $vars['#cache']['contexts'][] = 'url.path';
      $vars['content']['#markup'] .= Link::createFromRoute(t('Admin Login'), 'user.login', [], ['query' => \Drupal::destination()->getAsArray()])->toString();
    }

    $vars['content']['#markup'] .= t('<span id="powered-by"><a class="powered-by" href=":link">OpenScholar</a></span>', [':link' => 'https://theopenscholar.com/']);
  }
  // Hiding breadcrumb from login and change password page.
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == "user.login" || $route_name == "user.pass") {
    if (isset($vars['plugin_id']) && $vars['plugin_id'] == 'system_breadcrumb_block') {
      $vars['content'] = '';
    }
  }
}

/**
 * Implements hook_entity_create_access() for granting access to entity add paths to vsite roles.
 *
 * Handles entity create inside group via global paths:
 * - `/node/add/<bundle>`
 * - `/media/add/<bundle>`
 * - `/bibcite/reference/add/<bundle>`
 */
function os_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $plugin_id = "group_entity:{$context['entity_type_id']}";

  // Nodes follow a different plugin_id structure.
  if ($context['entity_type_id'] === 'node') {
    $plugin_id = "group_node:$entity_bundle";
  }

  /** @var \Drupal\os\AccessHelperInterface $access_helper */
  $access_helper = \Drupal::service('os.access_helper');

  return $access_helper->checkCreateAccess($account, $plugin_id);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function os_media_access(MediaInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\os\AccessHelperInterface $access_helper */
  $access_helper = \Drupal::service('os.access_helper');

  return $access_helper->checkAccess($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function os_bibcite_reference_access(ReferenceInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\os\AccessHelperInterface $access_helper */
  $access_helper = \Drupal::service('os.access_helper');

  return $access_helper->checkAccess($entity, $operation, $account);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function os_form_node_confirm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only act on node delete confirmation forms.
  if (strpos($form_id, '_delete_form') === FALSE) {
    return;
  }

  $content_type_redirect_mapping = new Map();
  $content_type_redirect_mapping->put('blog', 'view.blog.page_1');
  $content_type_redirect_mapping->put('events', 'view.calendar.page_1');
  $content_type_redirect_mapping->put('class', 'view.os_classes.page_1');
  $content_type_redirect_mapping->put('link', 'view.links.page');
  $content_type_redirect_mapping->put('news', 'view.news.page_1');
  $content_type_redirect_mapping->put('person', 'view.people.page_1');
  $content_type_redirect_mapping->put('presentation', 'view.presentations.page_1');
  $content_type_redirect_mapping->put('software_project', 'view.os_software_projects.page_1');

  $form['actions']['submit']['#submit'][] = 'os_alter_post_node_delete_redirect';
  $form_state->addBuildInfo('redirect_mapping', $content_type_redirect_mapping);
}

/**
 * Alters redirect location after a node is deleted.
 *
 * @ingroup forms
 */
function os_alter_post_node_delete_redirect(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\Form\NodeDeleteForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $entity */
  $entity = $form_object->getEntity();
  /** @var array $build_info */
  $build_info = $form_state->getBuildInfo();
  /** @var \Ds\Map $content_type_redirect_mapping */
  $content_type_redirect_mapping = $build_info['redirect_mapping'];
  /** @var string|NULL $redirect_route */
  $redirect_route = $content_type_redirect_mapping->get($entity->bundle(), NULL);

  if ($redirect_route) {
    $form_state->setRedirect($redirect_route);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function os_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  $entities_tabs_to_disable = ['node', 'bibcite_reference'];

  foreach ($entities_tabs_to_disable as $item) {
    if ($route_name === "entity.$item.canonical") {
      unset($data['tabs'][0]["entity.$item.edit_form"], $data['tabs'][0]["entity.$item.delete_form"]);
    }
  }
}

/**
 * Implements hook_link_alter() for redirecting users post-logout.
 *
 * @see \os_preprocess_block
 */
function os_link_alter(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];

  if ($url->isExternal() || !$url->isRouted()) {
    return;
  }

  if ($url->getRouteName() === 'user.logout') {
    $current_path = \Drupal::service('path.current')->getPath();
    /** @var \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination */
    $redirect_destination = \Drupal::service('redirect.destination');

    if ((strpos($current_path, 'cp') !== FALSE) ||
      (strpos($redirect_destination->get(), 'cp') !== FALSE)) {
      /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsite_context_manager */
      $vsite_context_manager = \Drupal::service('vsite.context_manager');
      // Active vsite absolute URL is like this `/site01/`, trimming the
      // rightmost `/` is necessary. Otherwise, it breaks the destination when
      // user is logged in via `Admin Login` option.
      // See \os_preprocess_block.
      $redirect_destination->set(rtrim($vsite_context_manager->getActiveVsiteAbsoluteUrl(), '/'));
    }

    $variables['options']['query'] = $redirect_destination->getAsArray();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function os_preprocess_checkboxes(&$variables) {
  if (empty($variables['element']['#field_name'])) {
    return;
  }
  if ($variables['element']['#field_name'] != 'field_types_whitelist') {
    return;
  }
  $variables['attributes']['class'][] = 'show-select-all-option';
  $variables['#attached']['library'][] = 'os/osSelectAllOption';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms.
 *
 * Gives more control over editing node metadata to vsite roles.
 */
function os_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsite_context_manager */
  $vsite_context_manager = \Drupal::service('vsite.context_manager');
  /** @var \Drupal\group\Entity\Group|null $active_vsite */
  $active_vsite = $vsite_context_manager->getActiveVsite();

  if (!$active_vsite) {
    return;
  }

  /** @var \Drupal\Core\Session\AccountInterface $current_user */
  $current_user = \Drupal::currentUser();
  /** @var bool $has_administer_content_access */
  $has_administer_content_access = $active_vsite->hasPermission('administer nodes', $current_user);
  /** @var bool $has_create_alias_access */
  $has_create_alias_access = $active_vsite->hasPermission('create url aliases', $current_user);
  /** @var bool $has_promote_content_access */
  $has_promote_content_access = $active_vsite->hasPermission('promote nodes', $current_user);
  /** @var bool $has_publish_content_access */
  $has_publish_content_access = $active_vsite->hasPermission('publish nodes', $current_user);

  $form['path']['#access'] = $has_create_alias_access;
  $form['path']['widget'][0]['#access'] = $has_create_alias_access;
  $form['uid']['#access'] = $has_administer_content_access;
  $form['sticky']['#access'] = $has_promote_content_access;
  $form['created']['#access'] = $has_administer_content_access;
  $form['status']['#access'] = $has_publish_content_access;
  $form['noindex']['#group'] = 'options';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('system.site');
  $form['#title'] = t('@site_name Login', ['@site_name' => $config->get('name')]);
  $form['name']['#title'] = t('@site_name Username or E-Mail', ['@site_name' => $config->get('name')]);
  $form['pass']['#title'] = t('@site_name Password', ['@site_name' => $config->get('name')]);
}

/**
 * Implements hook_entity_base_field_info().
 */
function os_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {

    $fields['noindex'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Prevent this page from appearing in search engine results'))
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_page_attachments().
 */
function os_page_attachments(array &$attachments) {
  $current_route = \Drupal::routeMatch();
  $node = $current_route->getParameter('node');
  if ($node && strpos($current_route->getRouteName(), 'canonical')) {
    // If noindex is on then add required tags.
    if ($node->noindex->value) {
      $noindex_tag = [
        '#tag' => 'meta',
        '#attributes' => [
          'name' => 'robots',
          'content' => 'NOINDEX, NOFOLLOW',
        ],
      ];
      $attachments['#attached']['html_head'][] = [$noindex_tag, 'robots'];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access() for making sure that vsite roles also have access to perform operations on a block_content entity.
 */
function os_block_content_access(BlockContentInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\os\AccessHelperInterface $access_helper */
  $access_helper = \Drupal::service('os.access_helper');

  return $access_helper->checkAccess($entity, $operation, $account);
}

/**
 * Implements hook_toolbar_alter() for altering toolbar items.
 */
function os_toolbar_alter(&$items) {
  $items['block_place']['tab']['#title'] = t('Layout');
  $id = $items['administration_search']['tray']['search']['#attributes']['id'];
  $items['administration_search']['tray']['search']['#label_attributes'] = ['for' => [$id]];
}

/**
 * Implements hook_form_FORM_ID_alter() for altering the behavior of node/publications admin UI.
 */
function os_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_ids = [
    'views-exposed-form-publications-cp',
    'views-exposed-form-site-content-page-1',
  ];
  if (in_array($form['#id'], $form_ids)) {
    $form['actions']['#id'] = $form['#id'] . '-edit-actions';
  }
}
