<?php

/**
 * @file
 * Hook implementations to support the media browser.
 */

use Drupal\bibcite_entity\Entity\ReferenceInterface;
use Drupal\Component\Utility\Environment;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\image\Entity\ImageStyle;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_library_info_alter().
 */
function os_media_library_info_alter(&$libraries, $extension) {
  if ($extension == 'os_media') {
    if (isset($libraries['mediaBrowser'])) {
      /* @var \Drupal\media\MediaTypeInterface[] $mediaTypes */
      $mediaTypes = \Drupal::entityTypeManager()->getStorage('media_type')->loadMultiple();
      $map = [];
      foreach ($mediaTypes as $type) {
        $sourceFieldDefinition = $type->getSource()->getSourceFieldDefinition($type);
        if (!is_null($sourceFieldDefinition)) {
          $map[$type->id()] = explode(' ', $sourceFieldDefinition->getSetting('file_extensions'));
        }
      }

      $upload_max_size = Environment::getUploadMaxSize();
      $libraries['mediaBrowser']['drupalSettings']['extensionMap'] = $map;
      $libraries['mediaBrowser']['drupalSettings']['embedWhitelist'] = [];
      $libraries['mediaBrowser']['drupalSettings']['maximumFileSize'] = format_size($upload_max_size);
      $libraries['mediaBrowser']['drupalSettings']['maximumFileSizeRaw'] = $upload_max_size;

      // Need this provide media thumbnail style urls to media browser.
      $media = \Drupal::entityTypeManager()->getStorage('media')->loadByProperties(['bundle' => 'image']);
      foreach ($media as $image) {
        $id = $image->field_media_image->target_id;
        $file = File::load($id);
        $path = $file->getFileUri();
        $thumbnail_uri[$id] = ImageStyle::load('media_thumbnail')->buildUrl($path);
      }
      $libraries['mediaBrowser']['drupalSettings']['filesPath'] = $thumbnail_uri;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for altering the behavior of media admin UI.
 */
function os_media_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $hidden_bundles = [
    'remote',
    'video',
  ];
  if ($form['#id'] == 'views-exposed-form-os-media-page-1') {
    $form['actions']['#id'] = $form['#id'] . '-edit-actions';
    $form['#submit'][] = 'os_media_media_admin_ui_filter_submit_handler';

    foreach ($hidden_bundles as $bundle) {
      unset($form['bundle']['#options'][$bundle]);
    }

    $form['add_files'] = [
      '#markup' => '<div class="cp-controls-wrapper"><div class="add_new button button--success" mb-open-modal panes="upload,web" types="image,video,audio,document,executable,html" on-select="reload($inserted)">' . t('Add file') . '</div></div>',
      '#weight' => 100,
    ];
    $form['#attached']['drupalSettings']['isBrowseMedia'] = TRUE;

  }
}

/**
 * Implements hook_media_source_info_alter() for adding new Media resources.
 */
function os_media_media_source_info_alter(array &$sources) {
  $all_providers = array_keys(\Drupal::service('media.oembed.provider_repository')->getAll());
  $sources['html'] = [
    'id' => 'oembed:html',
    'label' => t('HTML'),
    'description' => t('Use HTML for embedding Iframes.'),
    'allowed_field_types' => ['string'],
    'thumbnail_uri_metadata_attribute' => 'thumbnail_uri',
    'default_name_metadata_attribute' => 'default_name',
    'default_thumbnail_filename' => 'generic.png',
    'providers' => $all_providers,
    'class' => '\Drupal\os_media\Plugin\media\Source\MediaEmbed',
  ];

  $sources['oembed_content'] = [
    'id' => 'oembed:content',
    'label' => t('oEmbed Content'),
    'description' => t('Use oEmbed content from all providers.'),
    'allowed_field_types' => ['string'],
    'thumbnail_uri_metadata_attribute' => 'thumbnail_uri',
    'default_name_metadata_attribute' => 'default_name',
    'default_thumbnail_filename' => 'generic.png',
    'providers' => [],
    'class' => '\Drupal\os_media\Plugin\media\Source\MediaEmbed',
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert() for replacing placeholder with uuid as name for media entities whose names cannot be easily identified.
 */
function os_media_media_insert(EntityInterface $entity) {
  if ($entity->bundle() === 'html') {
    if ($entity->name->value === 'embed') {
      $entity->name->value = $entity->uuid();
      $entity->save();
    }
  }
  if ($entity->bundle() === 'oembed') {
    /** @var \Drupal\os_media\MediaEntityHelper $media_helper */
    $media_helper = \Drupal::service('os_media.media_helper');
    $resource = $media_helper->fetchEmbedlyResource($entity->field_media_oembed_content->value);
    $entity->name->value = $resource['title'];
    // Alt text for thumbnails.
    $entity->thumbnail->alt = $resource['title'];
    $entity->save();
  }
}

/**
 * Implements hook_theme().
 */
function os_media_theme() {
  return [
    'os_slick_wrapper' => [
      'variables' => [
        'items' => [],
        'settings' => [],
        'videos' => [],
        'others' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function os_media_preprocess_node(&$variables) {
  $field = 'field_attached_media';
  if (!isset($variables['content'][$field]['#build'])) {
    return;
  }
  $variables['#attached']['library'][] = 'os_media_gallery/os_slick_lightbox';
  os_media_build_popup_url($variables, $field);
}

/**
 * Implements hook_preprocess_bibcite_reference().
 */
function os_media_preprocess_bibcite_reference(&$variables) {
  $field = 'field_attach_files';
  if (!isset($variables['content'][$field]['#build'])) {
    return;
  }
  $variables['#attached']['library'][] = 'os_media_gallery/os_slick_lightbox';
  os_media_build_popup_url($variables, $field);
}

/**
 * Builds slick image popup url.
 *
 * @param array $variables
 *   Node variables.
 * @param string $field
 *   Field in context.
 *
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function os_media_build_popup_url(array &$variables, $field) : void {
  foreach ($variables['content'][$field]['#build']['items'] as &$item) {
    $item['slide']['#theme'] = 'os_media_gallery_blazy';
    $item['slide']['#delta'] = 0;
    /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $imageItem */
    $imageItem = $item['item'];
    $imageId = $imageItem->get('target_id')->getValue();
    $file = File::load($imageId);
    $path = $file->getFileUri();
    $uri = file_create_url($path);
    $item['slide']['#slick_popup_url'] = $uri;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function os_media_views_pre_render(ViewExecutable $view) {
  if ($view && ($view->storage->id() == 'os_media')) {
    $view->element['#attached']['library'][] = 'os/osMediaBrowse';
  }
}

/**
 * Implements hook_preprocess_HOOK() for overriding vsite media admin UI.
 *
 * This overrides the "Used In" field output.
 */
function os_media_preprocess_views_view_field(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  /** @var \Drupal\views\Plugin\views\field\FieldPluginBase $field */
  $field = $variables['field'];

  if ($view->current_display === 'page_1' &&
    $field->field === 'nothing' &&
    $field->options['id'] === 'nothing_4' &&
    $view->id() === 'os_media') {

    /** @var \Drupal\Core\TempStore\PrivateTempStoreFactory $private_temp_store_factory */
    $private_temp_store_factory = \Drupal::service('tempstore.private');
    /** @var \Drupal\Core\TempStore\PrivateTempStore $private_temp_store */
    $private_temp_store = $private_temp_store_factory->get('os_media');
    /** @var \Drupal\os_media\MediaAdminUiHelper $media_admin_ui_helper */
    $media_admin_ui_helper = \Drupal::service('os_media.media_admin_ui_helper');

    $media_usage_filter = $private_temp_store->get('os_media_usage_filter') ?? '';
    /** @var int $media_id */
    $media_id = $view->result[$view->row_index]->mid;
    /** @var \Drupal\node\NodeInterface[] $media_usages_in_nodes */
    $media_usages_in_nodes = $media_admin_ui_helper->getMediaUsageInNodes($media_id, $media_usage_filter);
    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface[] $media_usages_in_publications */
    $media_usages_in_publications = $media_admin_ui_helper->getMediaUsageInPublications($media_id, $media_usage_filter);

    $node_labels = array_map(static function (NodeInterface $node) {
      return Link::createFromRoute($node->label(), 'entity.node.canonical', [
        'node' => $node->id(),
      ])->toString();
    }, $media_usages_in_nodes);

    $publication_labels = array_map(static function (ReferenceInterface $reference) {
      return Link::createFromRoute($reference->label(), 'entity.bibcite_reference.canonical', [
        'bibcite_reference' => $reference->id(),
      ])->toString();
    }, $media_usages_in_publications);

    $labels = array_merge($node_labels, $publication_labels);

    $variables['output'] = [
      '#markup' => implode(', ', $labels),
    ];
  }
}

/**
 * Submit handler for os_media admin UI exposed filter form.
 *
 * @ingroup forms
 *
 * @throws \Drupal\Core\TempStore\TempStoreException
 */
function os_media_media_admin_ui_filter_submit_handler(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\Core\TempStore\PrivateTempStoreFactory $private_temp_store_factory */
  $private_temp_store_factory = \Drupal::service('tempstore.private');
  /** @var \Drupal\Core\TempStore\PrivateTempStore $private_temp_store */
  $private_temp_store = $private_temp_store_factory->get('os_media');

  $private_temp_store->set('os_media_usage_filter', $form_state->getValue('os_media_media_usage_filter'));
}
