<?php

/**
 * @file
 * Management of a vsite's themes.
 */

use Drupal\cp_appearance\Entity\CustomThemeInterface;

/**
 * Implements hook_theme().
 */
function cp_appearance_theme() {
  return [
    'cp_appearance_themes_page' => [
      'variables' => [
        'theme_groups' => [],
        'theme_group_titles' => [],
      ],
      'file' => 'cp_appearance.theme.inc',
      'template' => 'cp-appearance-themes-page',
    ],
  ];
}

/**
 * Implements hook_preprocess() for altering cache tags in responses for active vsite.
 *
 * A generic preprocess is used to make sure that every render arrays for active
 * vsite contain the custom cache tags.
 */
function cp_appearance_preprocess(&$variables, $hook) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsite_context_manager */
  $vsite_context_manager = \Drupal::service('vsite.context_manager');
  /** @var \Drupal\group\Entity\GroupInterface|null $active_vsite */
  $active_vsite = $vsite_context_manager->getActiveVsite();

  if ($active_vsite) {
    if (isset($variables['#cache']['tags'])) {
      $rendered_tag_position = array_search('rendered', $variables['#cache']['tags'], TRUE);

      if ($rendered_tag_position !== FALSE) {
        unset($variables['#cache']['tag'][$rendered_tag_position]);
      }
    }

    $variables['#cache']['tags'][] = "rendered:vsite:{$active_vsite->id()}";
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for handling custom theme updates.
 */
function cp_appearance_cp_custom_theme_update(CustomThemeInterface $custom_theme) {
  /** @var \Drupal\cp_appearance\Entity\CustomThemeInterface $original */
  $original = $custom_theme->original;

  // Making sure stale cache for the theme is removed.
  // Otherwise, we will see style from incorrect base theme.
  if ($custom_theme->getBaseTheme() !== $original->getBaseTheme()) {
    /** @var \Drupal\Core\Cache\CacheBackendInterface $cache */
    $cache = \Drupal::service('cache.bootstrap');
    $cache->invalidate("theme.active_theme.{$custom_theme->id()}");
  }

  // Make sure the browser assets are flushed. Otherwise, user will see the
  // old styles and scripts.
  if (($custom_theme->getStyles() !== $original->getStyles()) ||
    ($custom_theme->getScripts() !== $original->getScripts())) {
    _drupal_flush_css_js();
  }
}
