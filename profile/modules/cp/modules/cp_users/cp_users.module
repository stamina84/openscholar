<?php

/**
 * @file
 * Hook implementations for cp_users.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\cp_users\Controller\CpRolesListBuilder;
use Drupal\cp_users\CpUsersHelper;
use Drupal\group\Entity\GroupRole;
use Drupal\group\Entity\GroupRoleInterface;
use Drupal\group\Entity\GroupTypeInterface;

/**
 * Defines new mail templates that can be sent.
 *
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function cp_users_mail($key, &$message, $params) {
  /** @var \Drupal\Core\Config\ImmutableConfig $config */
  $config = Drupal::config('cp_users.settings');

  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $params['group'];

  /** @var \Drupal\user\UserInterface $user */
  $user = $params['user'];

  /** @var \Drupal\user\UserInterface $creator */
  $creator = $params['creator'];

  /** @var \Drupal\group\Entity\GroupRoleInterface[] $roles */
  $roles = $group->getMember($user)->getRoles();
  /** @var string|\Drupal\Component\Render\MarkupInterface $creator_display_name */
  $creator_display_name = $creator->getDisplayName();
  $user_display_name = $user->getDisplayName();
  $variables = [
    '@user-role' => \reset($roles)->label(),
    '@site-url' => Url::fromRoute('entity.group.canonical', ['group' => $group->id()], ['absolute' => TRUE])->toString(),
    '@user-firstname' => $user->get('field_first_name')->count() ? $user->get('field_first_name')->first()->getValue()['value'] : render($user_display_name),
    '@account-modifier' => render($creator_display_name),
    '@account-modifier-email' => $creator->getEmail(),
    '@sitewide-name' => $config->get('sitewide_name'),
  ];

  switch ($key) {
    case CpUsersHelper::CP_USERS_NEW_USER:
      $message['subject'] = t('You have been added as a member to the @site-url website', $variables);
      $message['body'] = [];
      $message['body'][] = t('Hi @user-firstname,', $variables);
      $message['body'][] = t('@account-modifier has added you as a member with the role of @user-role to the website @site-url. If you feel this was in error or have any questions, please contact them at @account-modifier-email', $variables);
      $message['body'][] = t("Don't forget to bookmark the site and save this email for future reference.");
      $message['body'][] = t("Here are some handy links for you:");
      $links = [];
      if ($training = $config->get('training_signup_url')) {
        $links[] = " * Sign up for training: $training\n";
      }
      $links[] = " * OpenScholar documentation: https://help.theopenscholar.com\n";
      if ($contact = $config->get('contact_url')) {
        $links[] = " * Need help with your project? $contact";
      }
      $message['body'][] = implode("", $links);
      $message['body'][] = t("Sincerely,\n@sitewide-name", $variables);
      $message['headers'] += (isset($params['headers']) && is_array($params['headers'])) ? $params['headers'] : [];
      break;

    case CpUsersHelper::CP_USERS_DELETE_FROM_GROUP:
      $message['subject'] = t("You have been removed from the @site-url website", $variables);
      $message['body'] = [];
      $message['body'][] = t("Hi @user-firstname,", $variables);
      $message['body'][] = t("@account-modifier has removed you as a member with the role of @user-role from the website @site-url. If you feel this was in error or have any questions, please contact them at @account-modifier-email", $variables);
      $message['body'][] = t("Sincerely,\n@sitewide-name", $variables);
      $message['headers'] += $params['headers'];
      break;
  }
}

/**
 * Implements hook_entity_presave().
 */
function cp_users_entity_presave(EntityInterface $entity) {
  // Makes sure that the GroupRole ID contains the vsite ID where it was
  // created.
  if ($entity instanceof GroupRoleInterface && $entity->isNew()) {
    /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsite_context_manager */
    $vsite_context_manager = \Drupal::service('vsite.context_manager');
    /** @var \Drupal\group\Entity\GroupInterface|null $vsite */
    $vsite = $vsite_context_manager->getActiveVsite();

    if (!$vsite) {
      return;
    }

    $provided_entity_id = \str_replace("{$entity->getGroupTypeId()}-", '', $entity->id());

    $entity->set('id', "{$entity->getGroupTypeId()}-{$vsite->id()}_{$provided_entity_id}");
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cp_users_form_group_role_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Performs alterations in the role-add form, so that it matches the
  // requirement of putting vsite ID in the GroupRole ID.
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsite_context_manager */
  $vsite_context_manager = \Drupal::service('vsite.context_manager');
  /** @var \Drupal\group\Entity\GroupInterface|null $vsite */
  $vsite = $vsite_context_manager->getActiveVsite();

  if (!$vsite) {
    return;
  }

  $subtract = \strlen($vsite->bundle()) + \strlen($vsite->id()) + 1;
  /** @var string $default_id_prefix */
  $default_id_prefix = $form['id']['#field_prefix'];

  $form['id']['#field_prefix'] = "$default_id_prefix{$vsite->id()}_";
  $form['id']['#maxlength'] = EntityTypeInterface::ID_MAX_LENGTH - $subtract;

  $form['actions']['submit']['#submit'][] = 'cp_users_group_role_add_form_submit';
}

/**
 * Submit handler for group role add form.
 *
 * @ingroup forms
 */
function cp_users_group_role_add_form_submit(array &$form, FormStateInterface $form_state) {
  $form_state->setRedirect('cp_users.role.list');
}

/**
 * Implements hook_entity_type_build() for adding more info to group_role entity type.
 *
 * This does the following:
 * - Sets a different class for entity list builder.
 * - Adds the description property to entity type.
 */
function cp_users_entity_type_build(array &$entity_types) {
  if (isset($entity_types['group_role'])) {
    /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $group_role_type */
    $group_role_type = $entity_types['group_role'];
    /** @var array $config_export */
    $config_export = $group_role_type->get('config_export');
    $config_export[] = 'description';
    /** @var array $entity_keys */
    $entity_keys = $group_role_type->get('entity_keys');
    $entity_keys['description'] = 'description';

    $group_role_type->setListBuilderClass(CpRolesListBuilder::class);
    $group_role_type->set('config_export', $config_export);
    $group_role_type->set('entity_keys', $entity_keys);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function cp_users_group_type_insert(GroupTypeInterface $entity) {
  // Group administrators should be able to edit permissions of member role.
  // Group module restricts that edit access for internal roles.
  $roles_to_be_converted_to_non_internal = [
    'member',
  ];

  foreach ($roles_to_be_converted_to_non_internal as $role) {
    /** @var \Drupal\group\Entity\GroupRoleInterface|null $group_role */
    $group_role = GroupRole::load("{$entity->id()}-$role");

    if (!$group_role) {
      continue;
    }

    $group_role->set('internal', FALSE);

    if ($role === 'member') {
      $group_role->set('label', t('Basic member'));
    }

    $group_role->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for making sure user shows the updated items in control panel.
 */
function cp_users_group_role_update(GroupRoleInterface $group_role) {
  /** @var \Drupal\group\Entity\GroupRoleInterface $original_group_role */
  $original_group_role = $group_role->original;

  // The ordering of permissions might vary, therefore, to be safe, check by
  // the number of permissions - before and after.
  if (count($original_group_role->getPermissions()) !== count($group_role->getPermissions())) {
    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator */
    $cache_tags_invalidator = \Drupal::service('cache_tags.invalidator');
    $cache_tags_invalidator->invalidateTags(['config:system.menu.control-panel']);
  }
}

/**
 * Renders a group role title in a format expected by OpenScholar.
 *
 * @param \Drupal\group\Entity\GroupRoleInterface $group_role
 *   The group role.
 *
 * @return string
 *   The rendered title.
 *
 * @throws \Exception
 */
function cp_users_render_cp_role_label(GroupRoleInterface $group_role): string {
  /** @var \Drupal\Core\Render\RendererInterface $renderer */
  $renderer = \Drupal::service('renderer');
  // The description is stored in the config, which is stored is stored in the
  // repository, therefore, we can knowingly use raw.
  $renderable_label = [
    '#type' => 'inline_template',
    '#template' => '<strong>{{ title }}</strong><span class="block">{{ description|raw }}</span>',
    '#context' => [
      'title' => $group_role->label(),
      'description' => $group_role->get('description'),
    ],
  ];

  return $renderer->render($renderable_label);
}

/**
 * Implements hook_preprocess_HOOK() for making sure cp items are in sync with the member role.
 */
function cp_users_preprocess_menu(&$variables) {
  // Couldn't find a definitive machine name for `control-panel` menu, and
  // therefore using theme hook inside the condition.
  if (strpos($variables['theme_hook_original'], 'control_panel') !== FALSE) {
    /** @var array $existing_cache_contexts */
    $existing_cache_contexts = $variables['#cache']['contexts'] ?? [];
    $variables['#cache']['contexts'] = array_merge($existing_cache_contexts, [
      'route.group',
      'user.group_permissions',
    ]);
  }
}

/**
 * Implements hook_cron().
 *
 * Removes expired support user members.
 */
function cp_users_cron() {

  // Get support user duration config.
  $duration = \Drupal::config('cp_users.settings')->get('support_user_duration');

  $request_time = \Drupal::time()->getRequestTime();
  $expiration_time = strtotime('-' . $duration, $request_time);

  $group_types = \Drupal::entityTypeManager()->getStorage('group_type')->loadMultiple();
  $group_storage = \Drupal::entityTypeManager()->getStorage('group_content');
  foreach ($group_types as $group_type) {

    // Fetch Expired Support user member.
    $query = \Drupal::entityQuery('group_content');
    $query->condition('type', $group_type->id() . '-group_membership');
    $query->condition('group_roles', $group_type->id() . '-support_user');
    $query->condition('created', $expiration_time, '<');
    $ids = $query->execute();

    $group_contents = $group_storage->loadMultiple($ids);
    foreach ($group_contents as $group_content) {
      $group = $group_content->getGroup();
      $user = $group_content->getEntity();
      $group->removeMember($user);
    }
  }

}

/**
 * Implements hook_form_alter().
 */
function cp_users_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'group_role_add_form' || $form_id == 'group_role_edit_form') {
    $form['label']['#description'] = t(
      'The human-readable name of this role. This text will be displayed on the permissions page.'
    );

    $form['actions']['submit']['#value'] = t('Save role');
  }

}
