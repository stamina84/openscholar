<?php

/**
 * @file
 * OS widgets.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\views\Plugin\views\filter\Bundle;
use Drupal\block_content\BlockContentForm;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Render\Element;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\os_widgets\Plugin\DisplayVariant\PlaceBlockPageVariant;
use Drupal\Core\Url;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\os_widgets\Entity\OsBlockContent;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\os_widgets\Helper\FollowMeWidgetHelper;
use Drupal\Component\Utility\Html;
use Drupal\Component\Serialization\Json;
use Drupal\block_content\Entity\BlockContent;

/**
 * Implements hook_library_info_alter().
 */
function os_widgets_library_info_alter(&$libraries, $extension) {
  if ($extension == 'os_widgets') {
    if (isset($libraries['layout'])) {
      $libraries['layout']['drupalSettings']['path']['layout']['saveLayout'] = 'cp/layout/save';
      $libraries['layout']['drupalSettings']['path']['layout']['resetLayout'] = 'cp/layout/reset';
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function os_widgets_entity_type_alter(array &$entity_types) {
  $entity_types['block_content']->setHandlerClass('view_builder', 'Drupal\os_widgets\OsBlockContentViewBuilder');
  $entity_types['block_content']->setClass(OsBlockContent::class);
}

/**
 * Implements hook_preprocess_node().
 */
function os_widgets_preprocess_node(&$variables) {
  if (!empty($variables['elements']['os_widgets_hide_node_title'])) {
    $variables['label']['#access'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function os_widgets_preprocess_block(&$variables) {
  if (!empty($variables['content']['#extra_classes'])) {
    foreach ($variables['content']['#extra_classes'] as $class) {
      $variables['attributes']['class'][] = $class;
    }
  }
}

/**
 * Implements hook_preprocess_links__toolbar_user().
 *
 * Add an extra item for link OS twitter.
 */
function os_widgets_preprocess_links__toolbar_user(&$vars) {
  $links_keys = array_keys($vars['links']);
  $last_key = end($links_keys);
  $last_item = array_pop($vars['links']);
  $vars['links']['twitter_status']['link'] = [
    '#type' => 'link',
    '#title' => t('Updates on twitter'),
    '#url' => Url::fromUri('https://twitter.com/osappstatus'),
    '#options' => [
      'attributes' => [
        'target' => '_blank',
        'class' => 'twitter',
      ],
    ],
  ];
  $vars['links'][$last_key] = $last_item;
}

/**
 * Implements hook_theme().
 */
function os_widgets_theme($existing, $type, $theme, $path) {
  return [
    'os_widgets_addthis_buttons' => [
      'variables' => [
        'image_path' => NULL,
      ],
    ],
    'os_widgets_addthis_toolbox_small' => [
      'variables' => [],
    ],
    'os_widgets_addthis_toolbox_large' => [
      'variables' => [],
    ],
    'os_widgets_addthis_numeric' => [
      'variables' => [],
    ],
    'os_widgets_addthis_counter' => [
      'variables' => [],
    ],
    'os_widgets_addthis_field_description' => [
      'variables' => [
        'image_base_path' => NULL,
      ],
    ],
    'os_widgets_twitter_pull' => [
      'variables' => [
        'tweets' => [],
        'is_follow_me' => FALSE,
        'follow_me_link' => '',
      ],
    ],
    'os_widgets_publication_types' => [
      'variables' => [
        'types' => [],
        'is_display_count' => FALSE,
        'pager' => '',
      ],
    ],
    'os_widgets_taxonomy_term_item' => [
      'variables' => [
        'term' => NULL,
        'label' => '',
        'description' => '',
        'children' => [],
      ],
    ],
    'os_widgets_taxonomy_display_type_menu' => [
      'variables' => [
        'items' => [],
        'title' => '',
        'list_type' => NULL,
        'wrapper_attributes' => [],
        'attributes' => [],
        'empty' => NULL,
        'context' => [],
        'children' => [],
      ],
    ],
    'os_widgets_taxonomy_display_type_slider' => [
      'variables' => [
        'items' => [],
        'title' => '',
        'list_type' => NULL,
        'wrapper_attributes' => [],
        'attributes' => [],
        'empty' => NULL,
        'context' => [],
        'children' => [],
      ],
    ],
    'field__block_content__field_widgets__widget_collection' => [
      'variables' => [
        'items' => [],
        'render_style' => '',
      ],
    ],
    'os_widgets_follow_me' => [
      'variables' => [
        'profile_links' => [],
        'display_social' => NULL,
        'rss_feed' => NULL,
        'rss_image_url' => NULL,
        'rss_page_url' => NULL,
      ],
    ],
    'os_widgets_mailchimp_link' => [
      'variables' => [
        'widget_title' => '',
        'subscribe_text' => '',
        'link_url' => '',
      ],
    ],
    'os_widgets_follow_me_link_text' => [
      'variables' => [
        'title' => NULL,
      ],
    ],
    'os_widgets_list_of_posts' => [
      'variables' => [
        'posts' => '',
        'pager' => '',
        'more_link' => '',
        'attributes' => [],
      ],
    ],
    'os_widgets_ajax_pager' => [
      'variables' => [
        'prev_link' => '',
        'next_link' => '',
        'pager_total' => '',
        'curr_page' => '',
        'heading_id' => '',
        'pager_id' => '',
      ],
    ],
    'os_widgets_tabs' => [
      'variables' => [
        'contents' => [],
      ],
    ],
    'os_widgets_dataverse_dataset_citation' => [
      'variables' => [
        'js_url' => '',
      ],
    ],
    'os_widgets_list_of_files' => [
      'variables' => [
        'files' => '',
        'pager' => '',
        'more_link' => '',
        'attributes' => [],
        'grid' => FALSE,
        'link_without_icon' => FALSE,
        'link_with_icon' => FALSE,
        'only_title' => FALSE,
        'icon_path' => '',
      ],
    ],
    'os_slideshow_formatter' => [
      'variables' => [
        'image' => NULL,
        'url' => NULL,
      ],
    ],
    'os_widgets_accordion' => [
      'variables' => [
        'bid' => NULL,
        'contents' => [],
        'collapsible' => NULL,
      ],
    ],
    'os_widgets_dataverse_dataset' => [
      'variables' => [
        'js_url' => '',
      ],
    ],
    'os_widgets_dataverse_list_widget' => [
      'variables' => [
        'embed_url' => '',
        'embed_height' => '',
      ],
    ],
    'os_widgets_slider' => [
      'variables' => [
        'bid' => NULL,
        'contents' => [],
        'slider_height' => NULL,
        'display_scrollbar' => NULL,
      ],
    ],
  ];
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_os_widgets_taxonomy_display_type_menu(&$variables) {
  template_preprocess_item_list($variables);
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_os_widgets_taxonomy_display_type_slider(&$variables) {
  template_preprocess_item_list($variables);
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_field__block_content__field_widgets__widget_collection(&$vars) {
  $vars['render_style'] = $vars['element']['#render_style'];
  $keys = Element::children($vars['element']);
  $vars['items'] = array_intersect_key($vars['element'], array_flip($keys));
  $vars['titles'] = [];
  $vars['id'] = $vars['element']['#object']->id();
  foreach ($vars['items'] as $k => $i) {
    /** @var \Drupal\block_content\BlockContentInterface $bc */
    $bc = $i['#block_content'];
    /** @var \Drupal\block\Entity\Block[] $instances */
    $instances = $bc->getInstances();
    $block = reset($instances);
    $vars['items'][$k] = \Drupal::service('renderer')->render(\Drupal::entityTypeManager()->getViewBuilder('block')->view($block));
    $vars['titles'][$k] = $bc->label();
  }
}

/**
 * Implements hook_block_content_presave().
 */
function os_widgets_block_content_presave(EntityInterface $entity) {
  Cache::invalidateTags([$entity->getVsiteCacheTag()]);
}

/**
 * Implements hook_form_alter().
 */
function os_widgets_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\block_content\BlockContentForm $form_object */
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof BlockContentForm && $entity = $form_object->getEntity()) {
    $entity_type_id = $entity->getEntityTypeId();
    if ($entity_type_id == 'block_content') {
      /** @var \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bunlde_info */
      $entity_type_bunlde_info = \Drupal::service('entity_type.bundle.info');
      $bundles = $entity_type_bunlde_info->getBundleInfo($entity_type_id);
      // Override form title value.
      $form['#title'] = t('Add new "%widget" Widget', ['%widget' => $bundles[$entity->bundle()]['label']]);
      // Override entity label.
      $form['info']['widget'][0]['value']['#title'] = t('Widget Description');
      $form['info']['widget'][0]['value']['#description'] = t('A brief description of the widget. Only displayed in the Layout section.');
    }
  }

  switch ($form_id) {
    case 'block_content_twitter_feed_form':
    case 'block_content_twitter_feed_edit_form':
      $form['field_twitter_followme_link']['#states'] = [
        'visible' => [
          ':input[name="field_twitter_is_followme_link[value]"]' => [
            'checked' => TRUE,
          ],
        ],
      ];
      break;

    case 'block_content_taxonomy_form':
    case 'block_content_taxonomy_edit_form':
      $form['field_taxonomy_vocabulary']['widget']['#ajax'] = [
        'callback' => 'os_widgets_field_taxonomy_vocabulary_ajax',
        'event' => 'change',
      ];
      $form['field_taxonomy_bundle']['#states'] = [
        'visible' => [
          ':input[name="field_taxonomy_behavior"]' => [
            'value' => 'select',
          ],
        ],
      ];
      $form['field_taxonomy_tree_depth']['#states'] = [
        'visible' => [
          ':input[name="field_taxonomy_show_children[value]"]' => [
            'checked' => TRUE,
          ],
        ],
      ];
      if (!empty($form['field_taxonomy_vocabulary']['widget']['#default_value'][0])) {
        /** @var \Drupal\cp_taxonomy\CpTaxonomyHelperInterface $taxonomy_helper */
        $taxonomy_helper = Drupal::service('cp.taxonomy.helper');
        $vid = $form['field_taxonomy_vocabulary']['widget']['#default_value'][0];
        $settings = $taxonomy_helper->getVocabularySettings($vid);

        _os_widgets_taxonomy_filter_bundle_options($form, $settings['allowed_vocabulary_reference_types']);
      }
      $form['field_taxonomy_display_type']['widget']['description']['#markup'] = t('<div>@help_text</div>', [
        '@help_text' => 'Each taxonomy term must have its own description (see the term creation/edit form). Also, the Show term descriptions checkbox above must be checked, and the Show child terms checkbox above must be unchecked.',
      ]);
      $form['field_taxonomy_display_type']['widget']['description']['#weight'] = 2;
      break;

    case 'block_content_rss_feed_form':
    case 'block_content_rss_feed_edit_form':
      $form['field_content_to_display']['#states'] = [
        'visible' => [
          ':input[name="field_is_show_all_content[value]"]' => [
            'checked' => FALSE,
          ],
        ],
      ];
      break;

    case 'block_content_publication_types_form':
    case 'block_content_publication_types_edit_form':
      $form['field_types_whitelist']['widget']['#options'][''] = t('Select all');
      ksort($form['field_types_whitelist']['widget']['#options']);
      $form['field_types_whitelist']['widget']['description']['#markup'] = t('<div class="description full">@help_text</div>', [
        '@help_text' => 'Select the types you want to appear in the widget.',
      ]);
      $form['field_types_whitelist']['widget']['description']['#weight'] = 2;

      break;

    case 'block_content_slideshow_form':
    case 'block_content_slideshow_edit_form':
      /** @var \Drupal\block_content\Entity\BlockContent $block_content */
      $block_content = $form_object->getEntity();
      // Exists block content.
      if (!$block_content->isNew()) {
        // If overlay value is Wide Overlay, then we shouldn't choose else.
        if ($form['field_slideshow_layout']['widget']['#default_value'] == '3_1_overlay') {
          unset($form['field_slideshow_layout']['widget']['#options']['16_9_overlay']);
          unset($form['field_slideshow_layout']['widget']['#options']['16_9_below']);
          unset($form['field_slideshow_layout']['widget']['#options']['16_9_side']);
        }
        else {
          // If not Wide overlay, then we shouldn't choose this one.
          unset($form['field_slideshow_layout']['widget']['#options']['3_1_overlay']);
        }
        $crop_remove_map = [
          '3_1_overlay' => 'crop_16_9',
          '16_9_overlay' => 'crop_3_1',
          '16_9_below' => 'crop_3_1',
          '16_9_side' => 'crop_3_1',
        ];
        foreach (Element::children($form["field_slideshow"]["widget"]) as $delta) {
          $widget_item = &$form["field_slideshow"]["widget"][$delta];
          if (empty($widget_item["subform"]["field_slide_file_image"]["widget"][0]["#crop_list"])) {
            continue;
          }
          $crop_list = &$widget_item["subform"]["field_slide_file_image"]["widget"][0]["#crop_list"];
          $layout_value = $block_content->get('field_slideshow_layout')->getString();
          $remove_crops = [$crop_remove_map[$layout_value]];
          $crop_list = array_diff($crop_list, $remove_crops);
        }
      }
      $form['field_slideshow_layout']['widget']['description']['#markup'] = t('<div class="description full">@help_text</div>', [
        '@help_text' => 'Slideshow images and captions will be laid out in this manner. Note that the layout can be changed at a later date, but the aspect ratio (Standard/Widescreen) is permanent once selected.',
      ]);
      $form['field_slideshow_layout']['widget']['description']['#weight'] = 2;
      break;

    case 'block_content_addthis_form':
    case 'block_content_addthis_edit_form':
      $form['addthis_description']['#markup'] = \Drupal::token()->replace('[os_widgets:addthis_display_style_description]');
      break;

    case 'block_content_list_of_posts_form':
    case 'block_content_list_of_posts_edit_form':

      $form['#attached']['library'][] = 'os_widgets/lopWidgetForm';
      $mappings = \Drupal::service('vsite.form_delete_destination')::REDIRECT_MAPPING;
      $form['#attached']['drupalSettings']['pathMapping'] = $mappings;

      // Remove None option from select lists.
      array_shift($form['field_content_type']['widget']['#options']);
      array_shift($form['field_display_style']['widget']['#options']);
      array_shift($form['field_sorted_by']['widget']['#options']);
      array_shift($form['field_show']['widget']['#options']);
      array_shift($form['field_events_should_expire']['widget']['#options']);
      unset($form['field_number_of_items_to_display']['widget']['#options']['_none']);

      // Content details group.
      $form['content_details'] = [
        '#type' => 'details',
        '#title' => '',
        '#group' => 'content',
        '#weight' => 1,
        '#open' => TRUE,
        '#attributes' => [
          'class' => ['lop-details'],
        ],
      ];

      $display_style_options = $form['field_display_style']['widget']['#options'];
      $content_default_value = $form['field_content_type']['widget']['#default_value'];
      $type_selected = array_shift($content_default_value);
      $type_value = $form_state->getValue('field_content_type');
      if ($type_value) {
        $type_selected = array_shift($type_value)['value'];
      }
      $form['field_display_style']['widget']['#options'] = os_widgets_display_style_options_lop($type_selected, $display_style_options);

      $sorted_by_options = $form['field_sorted_by']['widget']['#options'];
      $form['field_sorted_by']['widget']['#options'] = os_widgets_sort_by_options_lop($type_selected, $sorted_by_options);

      $form['dynamic_fields_container'] = [
        '#type' => 'container',
        '#prefix' => '<div id="dynamic-option-fields-lop">',
        '#suffix' => '</div>',
        '#group' => 'content_details',
        '#weight' => 2,
      ];

      $form['field_events_should_expire']['#prefix'] = '<div id="events-should-appear-expire-wrapper">';
      $form['field_events_should_expire']['#suffix'] = '</div>';

      $form['field_content_type']['#group'] = 'dynamic_fields_container';
      $form['field_display_style']['#group'] = 'dynamic_fields_container';
      $form['field_sorted_by']['#group'] = 'dynamic_fields_container';
      $form['field_show']['#group'] = 'dynamic_fields_container';
      $form['field_events_should_expire']['#group'] = 'dynamic_fields_container';

      $form['field_content_type']['widget']['#ajax'] = [
        'callback' => 'os_widgets_dynamic_options_lop_callback',
        'wrapper' => 'dynamic-option-fields-lop',
      ];

      $form['field_url_for_the_more_link']['#states'] = [
        'visible' => [
          ':input[name="field_show_more_link[value]"]' => ['checked' => TRUE],
        ],
      ];
      $form['field_show']['#states'] = [
        'visible' => [
          ':input[name="field_content_type"]' => ['value' => 'events'],
        ],
      ];

      // Publication type form element changes.
      $form['field_publication_types']['#type'] = 'details';
      $form['field_publication_types']['#title'] = t('Publication Types');
      $form['field_publication_types']['widget']['#title'] = t('Select publication types to display');
      $form['field_publication_types']['#group'] = 'dynamic_fields_container';
      $form['field_publication_types']['#states'] = [
        'visible' => [
          ':input[name="field_content_type"]' => ['value' => 'publications'],
        ],
      ];
      $form['field_publication_types']['#collapsible'] = TRUE;
      $form['field_publication_types']['#collapsed'] = TRUE;
      // Pager details group.
      $form['pager_details'] = [
        '#type' => 'details',
        '#title' => '',
        '#group' => 'content',
        '#weight' => 10,
        '#open' => TRUE,
      ];
      $form['field_show_more_link']['#group'] = 'pager_details';
      $form['field_show_pager']['#group'] = 'pager_details';
      $form['field_url_for_the_more_link']['#group'] = 'pager_details';
      $form['field_number_of_items_to_display']['#group'] = 'pager_details';
      $uri_title = $form['field_url_for_the_more_link']['widget']['0']['#title'];
      $form['field_url_for_the_more_link']['widget']['0']['#title'] = '';
      $form['field_url_for_the_more_link']['widget']['0']['uri']['#title'] = Html::escape($uri_title);
      $form['field_url_for_the_more_link']['widget']['0']['uri']['#description'] = '';
      if (!$form['field_url_for_the_more_link']['widget']['0']['uri']['#default_value']) {
        $form['field_url_for_the_more_link']['widget']['0']['uri']['#default_value'] = '/';
      }
      $form['field_url_for_the_more_link']['widget']['0']['title']['#default_value'] = t('More');
      $form['field_url_for_the_more_link']['widget']['0']['title']['#title'] = t('Label of the more link (default: More)');
      array_unshift($form['actions']['submit']['#submit'], 'os_widgets_submit_more_url');
      break;

    case 'block_content_dataverse_list_form':
    case 'block_content_dataverse_list_edit_form':
      $config = Drupal::service('config.factory')->get('os_widgets.dataverse');
      $form['field_dataverse_identifier']['widget'][0]['value']['#field_prefix'] = $config->get('listing_base_url');
      break;

  }
}

/**
 * Dynamic form field options for LOP.
 */
function os_widgets_dynamic_options_lop_callback(&$form, FormStateInterface $form_state) {
  return $form['dynamic_fields_container'];
}

/**
 * Display style options callback LOP.
 */
function os_widgets_display_style_options_lop($type_selected, $options) {
  $display_style_common = ['all', 'faq', 'presentation'];
  if (in_array($type_selected, $display_style_common)) {
    unset(
      $options['slide_teaser'],
      $options['links'],
      $options['sidebar_teaser'],
      $options['no_image_teaser']
    );
  }
  $display_style_common1 = [
    'blog',
    'class',
    'page',
    'publications',
    'software_project',
  ];
  if (in_array($type_selected, $display_style_common1)) {
    unset(
      $options['links'],
      $options['sidebar_teaser'],
      $options['no_image_teaser']
    );
  }
  if ($type_selected === 'events' || $type_selected === 'news') {
    unset(
      $options['links'],
      $options['no_image_teaser']
    );
  }
  if ($type_selected === 'link') {
    unset(
      $options['slide_teaser'],
      $options['sidebar_teaser'],
      $options['no_image_teaser']
    );
  }
  if ($type_selected === 'person') {
    unset($options['links']);
  }
  return $options;
}

/**
 * Sort by options callback.
 */
function os_widgets_sort_by_options_lop($type_selected, $options) {
  $sorted_by_common = [
    'all',
    'blog',
    'class',
    'faq',
    'link',
    'page',
    'person',
    'software_project',
  ];
  if (in_array($type_selected, $sorted_by_common)) {
    unset(
      $options['year_of_publication'],
      $options['news_date'],
      $options['recently_presented'],
      $options['sort_event_asc'],
      $options['sort_event_desc']
    );
  }
  if ($type_selected === 'events') {
    unset(
      $options['year_of_publication'],
      $options['news_date'],
      $options['recently_presented']
    );
  }
  if ($type_selected === 'news') {
    unset(
      $options['year_of_publication'],
      $options['recently_presented'],
      $options['sort_event_asc'],
      $options['sort_event_desc']
    );
  }
  if ($type_selected === 'presentation') {
    unset(
      $options['year_of_publication'],
      $options['news_date'],
      $options['sort_event_asc'],
      $options['sort_event_desc']
    );
  }
  if ($type_selected === 'publications') {
    unset(
      $options['recently_presented'],
      $options['news_date'],
      $options['sort_event_asc'],
      $options['sort_event_desc']
    );
  }
  return $options;
}

/**
 * Ajax callback.
 */
function os_widgets_dynamic_options_lof(array &$form, FormStateInterface $form_state) {
  return $form['dynamic_fields_container_lof'];
}

/**
 * Display style options callback LOF.
 */
function os_widgets_display_style_options_lof($type_selected, $options, $layout = NULL) {
  $display_style_common = [
    'all',
    'oembed',
    'audio',
    'document',
    'executable',
    'html',
  ];
  if (in_array($type_selected, $display_style_common)) {
    unset($options['thumbnail']);
  }
  if (($type_selected === 'image' || $type_selected === 'oembed') && $layout === 'grid') {
    unset(
      $options['full'],
      $options['link'],
      $options['link_icon']
    );
  }
  if ($type_selected === 'oembed' && $layout === 'grid') {
    $options['thumbnail'] = t('Thumbnail');
  }
  return $options;
}

/**
 * Ajax callback handler for field_taxonomy_vocabulary.
 */
function os_widgets_field_taxonomy_vocabulary_ajax(array &$form, FormStateInterface $form_state) {
  $selected_vocabulary = $form_state->getValue('field_taxonomy_vocabulary');
  /** @var \Drupal\cp_taxonomy\CpTaxonomyHelperInterface $taxonomy_helper */
  $taxonomy_helper = Drupal::service('cp.taxonomy.helper');
  $vid = $selected_vocabulary[0]['target_id'] ?? '';
  $settings = $taxonomy_helper->getVocabularySettings($vid);

  $saved_entity_types = $settings['allowed_vocabulary_reference_types'];
  foreach ($saved_entity_types as $entity_key) {
    if ($entity_key == 'node:events') {
      $saved_entity_types[] = 'node:past_events';
      $saved_entity_types[] = 'node:upcoming_events';
    }
  }

  if (empty($saved_entity_types)) {
    return _os_widgets_create_form_taxonomy_bundle_ajax_response($form);
  }
  _os_widgets_taxonomy_filter_bundle_options($form, $saved_entity_types);
  return _os_widgets_create_form_taxonomy_bundle_ajax_response($form);
}

/**
 * Check and remove from bundle options depend on entity bundles.
 *
 * @param array $form
 *   Form array.
 * @param array $saved_entity_types
 *   Array of selectable entity bundles.
 */
function _os_widgets_taxonomy_filter_bundle_options(array &$form, array $saved_entity_types): void {
  if (empty($saved_entity_types)) {
    return;
  }
  foreach ($form['field_taxonomy_bundle']['widget']['#options'] as $key => $option) {
    if ($key == '_none') {
      continue;
    }
    if (!in_array($key, $saved_entity_types)) {
      unset($form['field_taxonomy_bundle']['widget']['#options'][$key]);
    }
  }
}

/**
 * Create an AjaxResponse and add command to rebuild taxonomy bundle element.
 */
function _os_widgets_create_form_taxonomy_bundle_ajax_response($form) {
  $renderer = \Drupal::service('renderer');
  $response = new AjaxResponse();
  $response->addCommand(new ReplaceCommand('.form-item-field-taxonomy-bundle', $renderer->render($form['field_taxonomy_bundle']['widget'])));
  return $response;
}

/**
 * Collect all content types in array.
 *
 * @return array
 *   Collected array used by checkboxes in field.
 */
function os_widgets_field_taxonomy_bundle_allowed_values() {
  /** @var \Drupal\cp_taxonomy\CpTaxonomyHelperInterface $taxonomy_helper */
  $taxonomy_helper = Drupal::service('cp.taxonomy.helper');
  $bundles = $taxonomy_helper->getSelectableBundles();
  foreach (array_keys($bundles) as $bundle_name) {
    if ($bundle_name == 'node:events') {
      $bundles['node:past_events'] = t('Past events');
      $bundles['node:upcoming_events'] = t('Upcoming events');
    }
  }
  return $bundles;
}

/**
 * Return options of field content to display checkboxes.
 */
function os_widgets_field_content_to_display_allowed_values() {
  $types = Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->loadMultiple();
  $options = [];
  foreach ($types as $machine_name => $type) {
    $options[$machine_name] = $type->label();
  }
  // Add extra key to merge os_reference_feed into feeds.
  $options['all_publications'] = t('Publications');
  asort($options);
  return $options;
}

/**
 * Collect all bibcite reference types in array.
 *
 * @return array
 *   Collected array used by checkboxes in field.
 */
function os_widgets_field_types_whitelist_allowed_values() {
  $bundle_info = Drupal::service('entity_type.bundle.info')->getBundleInfo('bibcite_reference');
  if (empty($bundle_info)) {
    return [];
  }
  $reference_types = [];
  foreach ($bundle_info as $machine_name => $bundle) {
    $reference_types[$machine_name] = $bundle['label'];
  }
  return $reference_types;
}

/**
 * Implements hook_views_post_render().
 */
function os_widgets_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() == 'os_feeds') {
    $type_arg = $view->args[0] ?? '';
    $type_arg_array = explode('+', $type_arg);
    if (in_array('all_publications', $type_arg_array)) {
      $view_reference_feed = Views::getView('os_reference_feed');
      $view_reference_feed->execute('feed_1');
      $view_reference_feed->preview();

      // Nothing to merge.
      if (empty($view_reference_feed->result)) {
        return;
      }

      /** @var \Drupal\os_widgets\Helper\RssHelper $rss_helper */
      $rss_helper = Drupal::service('os_widgets.rss_helper');
      $rss_helper->setOriginalView($view);
      $rss_helper->setReferenceView($view_reference_feed);
      $rss_helper->setOutput($output);
      $original_view_order = $rss_helper->getOriginalViewOrder();
      $reference_view_order = $rss_helper->getReferenceViewOrder();

      $rss_helper->mergeRows($original_view_order, $reference_view_order);
      $output = $rss_helper->getOutput();
    }
  }
}

/**
 * Implements hook_display_variant_plugin_alter().
 */
function os_widgets_display_variant_plugin_alter(&$plugins) {
  if (isset($plugins['block_place_page'])) {
    $plugins['block_place_page']['class'] = PlaceBlockPageVariant::class;
  }
}

/**
 * Implements hook_form_block_content_form_alter().
 */
function os_widgets_form_block_content_form_alter(&$form, FormStateInterface &$form_state) {
  if (\Drupal::request()->isXmlHttpRequest()) {
    /** @var \Drupal\Core\Entity\EntityInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();
    if ($entity->isNew()) {
      $form['actions']['submit']['#ajax'] = [
        'callback' => '\Drupal\os_widgets\Controller\WidgetLibraryController::ajaxSubmitSave',
      ];
    }
    else {
      $form['actions']['submit']['#ajax'] = [
        'callback' => '\Drupal\os_widgets\Controller\WidgetLibraryController::ajaxSubmitEdit',
      ];
    }
    $delete_button_classes = array_merge($form['actions']['delete']['#attributes']['class'], [
      'btn',
      'btn-danger',
      'use-ajax',
    ]);
    $form['actions']['delete']['#attributes']['class'] = $delete_button_classes;
    $form['actions']['delete']['#attributes']['data-dialog-type'] = 'modal';
    $form['actions']['delete']['#icon'] = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => '',
      '#attributes' => [
        'class' => ['icon', 'glyphicon', 'glyphicon-trash'],
        'aria-hidden' => 'true',
      ],
    ];
  }
  // Disable revision information for widgets.
  $form['revision_information']['#access'] = FALSE;
}

/**
 * Implements hook_form_block_content_form_alter().
 */
function os_widgets_form_block_content_confirm_form_alter(&$form, FormStateInterface $form_state) {
  if (\Drupal::request()->isXmlHttpRequest()) {
    $form['actions']['submit']['#ajax'] = [
      'callback' => '\Drupal\os_widgets\Controller\WidgetLibraryController::ajaxDelete',
    ];
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function os_widgets_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#links']['block-contentblock-edit'])) {
    $element['#links']['block-contentblock-edit']['attributes'] = [
      'class' => ['use-ajax'],
      'data-dialog-type' => 'modal',
      'data-dialog-options' => Json::encode(['width' => 1000, 'dialogClass' => 'widget-popup']),
    ];
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function os_widgets_toolbar_alter(&$items) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContextManager */
  $vsiteContextManager = \Drupal::service('vsite.context_manager');
  $items['block_place']['#cache']['contexts'][] = 'user.group_permissions';

  if ($vsite = $vsiteContextManager->getActiveVsite()) {
    // Remove on Admin routes.
    $admin_route = \Drupal::service('router.admin_context')->isAdminRoute();
    // Remove on Block Demo page.
    $admin_demo = \Drupal::routeMatch()->getRouteName() === 'block.admin_demo';
    if ($membership = $vsite->getMember(\Drupal::currentUser())) {

      $items['block_place']['tab']['#access'] = ((\Drupal::currentUser()->hasPermission('administer blocks') || $membership->hasPermission('manage layout')) && !$admin_demo && !$admin_route);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_widgets_form_block_content_follow_me_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  os_widgets_alter_follow_me_block_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_widgets_form_block_content_follow_me_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  os_widgets_alter_follow_me_block_form($form, $form_state);
}

/**
 * Performs form alterations in follow_me block content type forms.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function os_widgets_alter_follow_me_block_form(array &$form, FormStateInterface $form_state) {
  $domains = FollowMeWidgetHelper::DEFAULTNETWORKS;
  $domain_list = [];
  foreach ($domains as $d) {
    $domain_list[] = $d['title'];
  }

  $form['#tree'] = TRUE;
  $form['#attributes'] = ['class' => ['os-widgets-follow-me-form']];

  // Add profile url.
  $form['add'] = [
    '#type' => 'fieldset',
    '#title' => t('Add New Profile'),
    'add_profile_url' => [
      '#type' => 'textfield',
      '#title' => t('Profile URL'),
      '#description' => t('Enter the URL of your profile on a social media site. Accepted sites are: @domains', ['@domains' => implode(', ', $domain_list)]),
      '#attributes' => ['class' => ['edit-link-to-add']],
    ],
    'add_button' => [
      '#type' => 'button',
      '#value' => t('Add'),
      '#limit_validation_errors' => [],
      '#attributes' => ['class' => ['add_new']],
    ],
    '#weight' => 3,
  ];

  // URL links.
  $form['links'] = [
    '#type' => 'markup',
    '#tree' => TRUE,
    '#weight' => 3,
    '#pre_render' => ['os_widgets_follow_me_table'],
  ];

  $links = &$form['links'];

  // Get all links.
  $all_links = os_widgets_get_profile_url_links($form_state->getFormObject()->getEntity());

  foreach ($all_links['links'] as $k => $v) {
    $n = [
      'text' => [
        '#theme' => 'os_widgets_follow_me_link_text',
        '#title' => $v['title'],
      ],
      'domain' => [
        '#type' => 'hidden',
        '#default_value' => $v['domain'],
      ],
      'title' => [
        '#type' => 'hidden',
        '#default_value' => $v['title'],
      ],
      'id' => [
        '#type' => 'hidden',
        '#default_value' => $v['id'] ?? '',
      ],
      'weight' => [
        '#type' => 'textfield',
        '#default_value' => $v['weight'],
        '#size' => 3,
        '#attributes' => [
          'class' => [$k !== 'blank' ? 'field-weight' : 'default-weight'],
        ],
      ],
    ];
    $links[$k] = $n;
  }
  $form['count'] = [
    '#type' => 'hidden',
    '#default_value' => count($all_links['links']) - 1,
  ];

  $form['actions']['submit']['#submit'][] = 'os_widgets_follow_me_submit_form';
  $form['#attached']['library'][] = 'os_widgets/followMeWidget';
  $form['#attached']['drupalSettings']['follow_networks'] = $domains;
}

/**
 * Custom submit for follow me form.
 *
 * Since, the form values are changed from JavaScript,
 * therefore, they can't be retrieved from `form_state_getValues()`.
 */
function os_widgets_follow_me_submit_form($form, FormStateInterface &$form_state) {
  $profile_links = $form_state->getUserInput();
  unset($profile_links['links']['blank']);
  $profile_link_ids = array_column($profile_links['links'], 'id');

  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  foreach ($entity->get('field_links')->getValue() as $value) {
    // Deleting paragraphs only if it's removed from widget.
    if ($value['target_id'] && (array_search($value['target_id'], $profile_link_ids) === FALSE)) {
      $paragraph = Paragraph::load($value['target_id']);
      if (!empty($paragraph)) {
        $paragraph->delete();
      }
    }
  }

  if (!empty($profile_links['links'])) {
    // Create the Paragraph with fields.
    $paragraph_items = [];
    foreach ($profile_links['links'] as $values) {
      if (!empty($values['domain'])) {
        // Creating paragraphs only if domain is not empty and if its new.
        if (empty($values['id'])) {
          $paragraph = Paragraph::create(['type' => 'follow_me_links']);
          $paragraph->set('field_domain', Html::escape($values['domain']));
          $paragraph->set('field_link_title', Html::escape($values['title']));
          $paragraph->set('field_weight', Html::escape($values['weight']));
          $paragraph->save();
        }
        else {
          $paragraph = Paragraph::load($values['id']);
        }
        $paragraph_items[] = [
          'target_id' => $paragraph->id(),
          'target_revision_id' => $paragraph->getRevisionId(),
        ];
      }
    }

    $entity->set('field_links', $paragraph_items);
    // Save the entire entity.
    $entity->save();
  }
}

/**
 * Renders the list of links as a table.
 */
function os_widgets_follow_me_table($element) {
  // Render the form as a table.
  $rows = [];
  $render = \Drupal::service('renderer');
  foreach (Element::children($element) as $c) {
    $rows[] = [
      'data' => [
        $render->render($element[$c]['text']),
        $render->render($element[$c]['domain']),
        $render->render($element[$c]['title']),
        $render->render($element[$c]['id']),
        $render->render($element[$c]['weight']),
      ],
      'class' => [$c !== 'blank' ? 'draggable' : ''],
    ];
  }

  $element['#headers'] = [];
  $element['#attributes'] = ['id' => 'follow-links-list'];
  $element['#rows'] = $rows;
  $element['#sticky'] = FALSE;
  $element['#empty'] = TRUE;
  $element['#theme'] = 'table';

  drupal_attach_tabledrag($element, [
    'table_id' => 'follow-links-list',
    'action' => 'order',
    'relationship' => 'sibling',
    'group' => 'field-weight',
  ]);
  return $element;
}

/**
 * Get all profile url links.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 *
 * @return array
 *   Return profile links.
 */
function os_widgets_get_profile_url_links(EntityInterface $entity) {
  $links = [];
  $block = $entity->get('field_links')->getValue();

  $links['links']['blank'] = [
    'title' => '__blank__',
    'domain' => '',
    'weight' => 2000000,
  ];

  foreach ($block as $value) {
    if ($value['target_id']) {
      $paragraph = Paragraph::load($value['target_id']);

      if ($paragraph) {
        $profile_links = [
          'domain' => $paragraph->get('field_domain')->getString(),
          'title' => $paragraph->get('field_link_title')->getString(),
          'weight' => $paragraph->get('field_weight')->getString(),
          'id' => $value['target_id'],
        ];
        $links['links'][] = $profile_links;
      }
    }
  }
  return $links;
}

/**
 * Alter field mailing_list options - Mailchimp subscription block type.
 *
 * Setting field options if mailchimp apikey exists for a Vsite, this function
 * is called from field_storage YAML settings.
 */
function os_widgets_field_mailing_list_options() {
  $options = [];
  $mailchimp_config = \Drupal::config('mailchimp.settings');
  $mailchimpService = \Drupal::service('os_mailchimp.lists');
  $api_key = $mailchimp_config->get('api_key');

  if (!empty($api_key)) {
    $lists = $mailchimpService->osMailchimpGetLists($api_key);
    $options = $mailchimpService->mailChimpListsToOptions($lists);
  }

  return $options;
}

/**
 * Set dynamic allowed values for the LOP form.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 *
 * @see options_allowed_values()
 */
function os_widgets_allowed_values_lop_widget_form(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $field_name = $definition->get('field_name');
  $options = [];
  if ($field_name === 'field_publication_types') {
    $options['all'] = t('Select All');
    $publication_types = \Drupal::entityTypeManager()->getStorage('bibcite_reference_type')->loadMultiple();
    foreach ($publication_types as $id => $type) {
      $options[$id] = $type->get('label');
    }
  }
  elseif ($field_name === 'field_content_type') {
    $options['all'] = t('All');
    $apps = \Drupal::service('os_app_access.app_loader')->getAppsForUser(Drupal::currentUser());
    foreach ($apps as $app) {
      if ($app['entityType'] === 'media') {
        continue;
      }
      $title = (string) $app['title'];
      $bundle = $app['entityType'] === 'bibcite_reference' ? 'publications' : $app['bundle'][0];
      $options[$bundle] = $title;
    }
  }
  return $options;
}

/**
 * Set dynamic allowed values for LOF form fields.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 *
 * @see options_allowed_values()
 */
function os_widgets_allowed_values_lof_widget_form(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options['all'] = t('All');
  /* @var \Drupal\media\MediaTypeInterface[] $media_types */
  $media_types = \Drupal::entityTypeManager()->getStorage('media_type')->loadMultiple();
  /* @var \Drupal\os_media\MediaEntityHelperInterface $media_helper */
  $media_helper = \Drupal::service('os_media.media_helper');

  foreach ($media_types as $id => $type) {
    if (in_array($id, $media_helper::ALLOWED_TYPES)) {
      $options[$id] = $type->get('label');
    }
  }
  // Sorting to show Images and Embeds above any other media as per current
  // setup.
  if (count($options) === 7) {
    $options_spliced = array_splice($options, 1, 4);
    $options = $options + $options_spliced;
  }
  return $options;
}

/**
 * Sets the default value for the fields.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function os_widgets_default_values_lop_form(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  $field_name = $definition->getName();

  $default[] = ['value' => 'all'];
  if ($field_name === 'field_publication_types') {
    $publication_types = \Drupal::entityTypeManager()->getStorage('bibcite_reference_type')->loadMultiple();
    foreach ($publication_types as $type) {
      $default[] = [
        'value' => $type->id(),
      ];
    }
  }
  return $default;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_widgets_form_block_content_list_of_files_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  os_widgets_alter_list_of_files_block_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_widgets_form_block_content_list_of_files_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  os_widgets_alter_list_of_files_block_form($form, $form_state);
}

/**
 * Alters list of files widget block form.
 *
 * @param array $form
 *   The form to alter.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function os_widgets_alter_list_of_files_block_form(array &$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'os_widgets/lofWidgetForm';

  // Remove None option from select lists.
  array_shift($form['field_file_type']['widget']['#options']);
  array_shift($form['field_display_style_lof']['widget']['#options']);
  array_shift($form['field_sorted_by_lof']['widget']['#options']);
  array_shift($form['field_layout']['widget']['#options']);
  unset($form['field_columns']['widget']['#options']['_none']);
  unset($form['field_number_of_items_to_display']['widget']['#options']['_none']);

  // File details group.
  $form['file_details'] = [
    '#type' => 'details',
    '#title' => '',
    '#group' => 'content',
    '#weight' => 2,
    '#open' => TRUE,
    '#attributes' => [
      'class' => ['lof-details'],
    ],
  ];

  $display_style_options = $form['field_display_style_lof']['widget']['#options'];
  $file_default_value = $form['field_file_type']['widget']['#default_value'];
  $type_selected = array_shift($file_default_value);
  $type_value = $form_state->getValue('field_file_type');
  if ($type_value) {
    $type_selected = array_shift($type_value)['value'];
  }

  $field_layout = $form['field_layout']['widget']['#default_value'];
  $layout_selected = array_shift($field_layout);
  $layout_value = $form_state->getValue('field_layout');
  if ($layout_value) {
    $layout_selected = array_shift($layout_value)['value'];
  }
  $form['field_display_style_lof']['widget']['#options'] = os_widgets_display_style_options_lof($type_selected, $display_style_options, $layout_selected);

  $form['dynamic_fields_container_lof'] = [
    '#type' => 'container',
    '#prefix' => '<div id="dynamic-option-fields-lof">',
    '#suffix' => '</div>',
    '#group' => 'file_details',
    '#weight' => 2,
  ];

  $form['field_file_type']['#group'] = 'dynamic_fields_container_lof';
  $form['field_layout']['#group'] = 'dynamic_fields_container_lof';
  $form['field_columns']['#group'] = 'dynamic_fields_container_lof';
  $form['field_display_style_lof']['#group'] = 'dynamic_fields_container_lof';
  $form['field_sorted_by_lof']['#group'] = 'dynamic_fields_container_lof';

  $form['field_file_type']['widget']['#ajax'] = [
    'callback' => 'os_widgets_dynamic_options_lof',
    'wrapper' => 'dynamic-option-fields-lof',
  ];

  $form['field_layout']['widget']['#ajax'] = [
    'callback' => 'os_widgets_dynamic_options_lof',
    'wrapper' => 'dynamic-option-fields-lof',
  ];

  $form['field_layout']['#states'] = [
    'visible' => [
      ':input[name="field_file_type"]' => [['value' => 'image'], ['value' => 'oembed']],
    ],
  ];

  // Pager details group.
  $form['pager_details'] = [
    '#type' => 'details',
    '#title' => '',
    '#group' => 'content',
    '#weight' => 5,
    '#open' => TRUE,
  ];
  $form['field_show_more_link']['#group'] = 'pager_details';
  $form['field_show_pager']['#group'] = 'pager_details';
  $form['field_url_for_the_more_link']['#group'] = 'pager_details';
  $form['field_number_of_items_to_display']['#group'] = 'pager_details';

  $form['field_url_for_the_more_link']['#states'] = [
    'visible' => [
      ':input[name="field_show_more_link[value]"]' => ['checked' => TRUE],
    ],
  ];

  $uri_title = $form['field_url_for_the_more_link']['widget']['0']['#title'];
  $form['field_url_for_the_more_link']['widget']['0']['#title'] = '';
  $form['field_url_for_the_more_link']['widget']['0']['uri']['#title'] = Html::escape($uri_title);
  $form['field_url_for_the_more_link']['widget']['0']['uri']['#description'] = '';
  if (!$form['field_url_for_the_more_link']['widget']['0']['uri']['#default_value']) {
    $form['field_url_for_the_more_link']['widget']['0']['uri']['#default_value'] = '/';
  }
  $form['field_url_for_the_more_link']['widget']['0']['title']['#default_value'] = t('More');
  $form['field_url_for_the_more_link']['widget']['0']['title']['#title'] = t('Label of the more link (default: More)');
  array_unshift($form['actions']['submit']['#submit'], 'os_widgets_submit_more_url');
}

/**
 * Common submit handler for all widgets which need to handle show more link.
 *
 * @param array $form
 *   Form itself.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function os_widgets_submit_more_url(array $form, FormStateInterface $form_state) {
  $url_field = $form_state->getValue('field_url_for_the_more_link');
  $url_field = array_shift($url_field);
  $uri = $url_field['uri'];

  // Don't do anything if external url.
  if (UrlHelper::isExternal($uri)) {
    return;
  }

  // If purl attached then do not do anything if not prepend current vsite purl.
  // We are not doing any additional validations as it will be handled by url
  // field's element_validate and we can only prepend current vsite purl to any
  // url entered if it does not carry active/curent vsite's purl.
  $uri_raw = str_replace('internal:/', '', $uri);
  $uri_raw = str_replace('entity:', '', $uri_raw);
  $uri = \Drupal::service('os_widgets.list_widgets_helper')->prependPurl($uri, $uri_raw);

  $form_state->setValue('field_url_for_the_more_link', [[
    'uri' => $uri,
    'title' => $url_field['title'],
    'attributes' => $url_field['attributes'],
  ],
  ]
  );
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Deleting the block_ids stored in field_widget_collection field
 * is implemented considering that block is deleted from a vSite.
 */
function os_widgets_block_delete(EntityInterface $entity) {
  if (strpos($entity->id(), 'block_content|') !== FALSE) {
    $block_uuid = str_replace('block_content|', '', $entity->id());
    // Fetching bid as its replaced with UUID in OsWidgetsBlockRepository.php.
    $block = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $block_uuid);
    $bid = $block->id();
    // EntityQuery to fetch all blocks that are referencing above block.
    $query = Drupal::service('entity.query')
      ->get('block_content')
      ->condition('field_widget_collection', $bid);
    $entity_ids = $query->execute();
    if (!empty($entity_ids)) {
      foreach ($entity_ids as $entity_id) {
        $block = BlockContent::load($entity_id);
        $tabs = $block->get('field_widget_collection')->getValue();
        foreach ($tabs as $key => $targets) {
          if ($targets['target_id'] == $bid) {
            unset($tabs[$key]);
          }
        }
        $block->set('field_widget_collection', $tabs);
        $block->save();
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_widgets_form_block_content_slider_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  os_widgets_alter_slider_block_form($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_widgets_form_block_content_slider_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  os_widgets_alter_slider_block_form($form, $form_state);
}

/**
 * Alters slider widget block form.
 *
 * @param array $form
 *   The form to alter.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function os_widgets_alter_slider_block_form(array &$form, FormStateInterface $form_state) {
  $form['display_options'] = [
    '#type' => 'details',
    '#title' => t('Display options'),
    '#group' => 'content',
    '#weight' => 5,
  ];
  $form['field_display_arrows']['#group'] = 'display_options';
  $form['field_display_scrollbar']['#group'] = 'display_options';
  $form['field_duration']['#group'] = 'display_options';
  $form['field_slider_height']['#group'] = 'display_options';
  $form['field_transition_speed']['#group'] = 'display_options';
}

/**
 * Implements hook_page_attachments().
 *
 * Attaching os_widgets contextualChanges library to a page
 * to handle changes in delete contextual link.
 */
function os_widgets_page_attachments(array &$page) {
  if (!\Drupal::currentUser()->hasPermission('access contextual links')) {
    return;
  }
  $page['#attached']['library'][] = 'os_widgets/contextualChanges';
}
