<?php

/**
 * @file
 * Bibcite customizations for Openscholar.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\bibcite_entity\Entity\KeywordInterface;
use Drupal\bibcite_entity\Entity\ReferenceType;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\link\LinkItemInterface;
use Drupal\os_publications\RepecHelper;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Ds\Map;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_views_data_alter().
 */
function os_publications_views_data_alter(array &$data) {
  $data['bibcite_reference']['first_letter_last_name_author'] = [
    'title' => t("First letter of Author's last name"),
    'field' => [
      'id' => 'os_publications_first_letter_last_name_author',
    ],
  ];

  $data['bibcite_contributor']['first_letter_last_name_author'] = [
    'title' => t("First letter of Author's last name"),
    'sort' => [
      'id' => 'os_publications_first_letter_last_name_author',
      'field' => 'last_name',
    ],
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function os_publications_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() !== 'publications') {
    return;
  }
  /** @var \Drupal\Core\Config\ImmutableConfig $os_publication_settings */
  $os_publication_settings = \Drupal::config('os_publications.settings');

  // Alter "publication type" filter.
  foreach ($query->where as &$condition_group) {
    foreach ($condition_group['conditions'] as &$condition) {
      if ($condition['field'] !== 'bibcite_reference.type') {
        continue;
      }

      // Alter values passed to reference_type condition.
      /** @var array $allowed_publication_types */
      $allowed_publication_types = $os_publication_settings->get('filter_publication_types');

      // If type query parameter exists we will override allowed array.
      $request_query = Drupal::request()->query;
      if ($type = $request_query->get('type')) {
        // Override filtering by request query.
        $allowed_publication_types = [
          $type => $type,
        ];
      }
      // Convert the array structure into views suitable format.
      // Array structure obtained from config is:
      // [
      // 'artwork' => 'artwork',
      // 'journal' => 'journal',
      // 'software' => 0,
      // ]
      // While views expects it to be like:
      // [
      // 0 => 'artwork',
      // 1 => 'journal',
      // ].
      $condition['value'] = array_filter(array_values($allowed_publication_types));
    }
  }

  // Alter sorting order.
  // A mapping of display_id and the field whose sort order will be altered.
  $mapping = new Map();
  $mapping->put('page_1', 'bibcite_reference_type');
  $mapping->put('page_2', 'bibcite_reference_title_first_char_excl_prep');
  $mapping->put('page_3', 'first_letter_last_name_author');
  $mapping->put('page_4', 'bibcite_reference_bibcite_year');

  /** @var string $sort_order */
  $sort_order = $os_publication_settings->get('biblio_order');

  foreach ($query->orderby as &$group) {
    if ($group['field'] === $mapping->get($view->current_display, NULL)) {
      $group['direction'] = $sort_order;
    }

    // Additionaly, sorting of rows inside every group in publications by
    // author can also be controlled from the setting.
    if ($view->current_display === 'page_2' && $group['field'] === 'bibcite_reference_title') {
      $group['direction'] = $sort_order;
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function os_publications_page_attachments(array &$page) {
  $current_route = \Drupal::routeMatch();
  $types = [];
  $entity_id = [];
  $meta = [];
  /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
  $type = \Drupal::service('os_publications.manager_citation_distribute');
  $plugins = $type->getDefinitions();

  // Adds metadata to the publications pages.
  $entities = $current_route->getParameters();
  if ($entities->has('bibcite_reference') && strpos($current_route->getRouteName(), 'canonical')) {
    foreach ($entities as $entity => $value) {
      $repos = $value->distribution->getString();
      $repos = explode(',', $repos);
      $types[] = $entity;
      $entity_id[$entity] = $value->id();

      foreach ($plugins as $plugin) {
        if (in_array('bibcite_reference', $types)) {
          if (isset($plugin['type']) && in_array($plugin['id'], $repos) && $plugin['type'] == 'metadata') {
            $service = $type->createInstance($plugin['id']);
            if ($service && method_exists($service, 'render')) {
              $meta = $service->render($entity_id['bibcite_reference']);
            }
          }
        }
        foreach ($meta as $key => $item) {
          $page['#attached']['html_head'][] = [$item, $key];
        }
      }
    }
    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $publication */
    $publication = $entities->get('bibcite_reference');
    // If noindex is on then add required tags.
    $noindex = $publication ? $publication->noindex->value : NULL;
    if ($noindex) {
      $noindex_tag = [
        '#tag' => 'meta',
        '#attributes' => [
          'name' => 'robots',
          'content' => 'NOINDEX, NOFOLLOW',
        ],
      ];
      $page['#attached']['html_head'][] = [$noindex_tag, 'robots'];
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function os_publications_views_pre_render(ViewExecutable $view) {
  if ($view->id() !== 'publications') {
    return;
  }

  if ($view->current_display !== 'cp') {
    // Include citation download button.
    $view->attachment_before = \Drupal::service('os_publications.citation_helper')->getCitationDownloadButton();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function os_publications_preprocess_views_view_unformatted(&$variables) {
  // Change grouping headers to corresponding mapped years text.
  if ($variables['view']->id() == 'publications' && $variables['view']->current_display == 'page_4') {
    $pub_config = \Drupal::configFactory()->get('os_publications.settings')->get('publications_years_text');
    $title = is_object($variables['title']) ? $variables['title']->__toString() : $variables['title'];
    if (in_array($title, array_keys($pub_config))) {
      $year_number = $title;
      $variables['title'] = $pub_config[$year_number];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function os_publications_bibcite_reference_presave(EntityInterface $entity) {
  /** @var \Drupal\os_publications\PublicationsListingHelperInterface $publications_listing_helper */
  $publications_listing_helper = \Drupal::service('os_publications.listing_helper');

  $label = strip_tags(html_entity_decode($entity->html_title->value));
  // Set the label anyway to be used in places such as breadcrumbs.
  // For other uses we will use html title field.
  $entity->title->value = $label;

  $entity->set('title_first_char_excl_prep', [
    'value' => $publications_listing_helper->convertLabel($label),
  ]);
}

/**
 * Implements hook_entity_base_field_info().
 */
function os_publications_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'bibcite_reference') {
    $options = [];
    /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
    $type = \Drupal::service('os_publications.manager_citation_distribute');
    /** @var array $plugins */
    $plugins = $type->getDefinitions();
    foreach ($plugins as $plugin) {
      $link = Link::fromTextAndUrl($plugin['name'], Url::fromUri($plugin['href']))->toString();
      $options[$plugin['id']] = $link;
    }

    $fields['distribution'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t("Distribute to Repositories"))
      ->setSetting('allowed_values', $options)
      ->setCardinality(-1)
      ->setDisplayOptions('form', [
        'type' => 'options_buttons',
        'settings' => [
          'display_label' => FALSE,
        ],
        'weight' => '10',
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['is_sticky'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Sticky at top of lists'))
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['title_first_char_excl_prep'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Title first letter excluding prepositions'))
      ->setRevisionable(TRUE);

    $fields['full_text'] = BaseFieldDefinition::create('text_long')
      ->setLabel('FULL TEXT')
      ->setDescription('You can enter the full text of your article here, although most people upload PDFs instead.')
      ->setTranslatable(TRUE)
      ->setDisplayOptions('view', [
        'type' => 'text_default',
        'weight' => 5,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'text_textfield',
        'weight' => 5,
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['notes'] = BaseFieldDefinition::create('text_long')
      ->setLabel('NOTES')
      ->setDescription("This note will appear after the abstract. Your notes are currently set to private. You can make this change in the publications section of your control panel's App settings")
      ->setTranslatable(TRUE)
      ->setDisplayOptions('view', [
        'type' => 'text_default',
        'weight' => 6,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'text_textfield',
        'weight' => 6,
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['html_title'] = BaseFieldDefinition::create('text_long')
      ->setLabel('Title')
      ->setTranslatable(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'text_textarea',
        'weight' => -10,
        'settings' => [
          'rows' => 1,
        ],
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['path'] = BaseFieldDefinition::create('path')
      ->setCustomStorage(TRUE)
      ->setLabel(t('URL'))
      ->setTranslatable(TRUE)
      ->setComputed(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'path',
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['created'] = BaseFieldDefinition::create('created')
      ->setLabel(t('Authored on'))
      ->setDescription(t('The time that the publication was created.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'datetime_timestamp',
        'weight' => 10,
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    $fields['noindex'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Prevent this page from appearing in search engine results'))
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $pub_month_options = \Drupal::configFactory()->get('os_publications.settings')->get('pub_month_options');

    $fields['publication_month'] = BaseFieldDefinition::create('list_integer')
      ->setLabel(t('Publication Month'))
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'settings' => [
          'display_label' => FALSE,
        ],
      ])
      ->setSetting('allowed_values', $pub_month_options)
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setCardinality(1)
      ->setTranslatable(FALSE);

    $pub_day_options = \Drupal::configFactory()->get('os_publications.settings')->get('pub_day_options');

    $fields['publication_day'] = BaseFieldDefinition::create('list_integer')
      ->setLabel(t('Publication Day'))
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'settings' => [
          'display_label' => FALSE,
        ],
      ])
      ->setRevisionable(TRUE)
      ->setSetting('allowed_values', $pub_day_options)
      ->setDisplayConfigurable('form', TRUE)
      ->setCardinality(1)
      ->setTranslatable(FALSE);

    $fields['publishers_version'] = BaseFieldDefinition::create('link')
      ->setLabel(t('Publishers version'))
      ->setTranslatable(FALSE)
      ->setRevisionable(TRUE)
      ->setSettings([
        'link_type' => LinkItemInterface::LINK_GENERIC,
        'title' => 1,
      ])
      ->setDisplayOptions('form', [
        'type' => 'link_default',
        'weight' => 54,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function os_publications_form_bibcite_reference_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Config\ImmutableConfig $config_factory */
  $config_factory = \Drupal::service('config.factory')->get('os_publications.settings');
  /** @var array $auto_flags */
  $auto_flags = $config_factory->get('citation_distribute_autoflags');
  /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $reference */
  $reference = $form_state->getFormObject()->getEntity();

  if ($reference->id() === NULL) {
    $form['distribution']['widget']['#default_value'] = array_keys(array_filter($auto_flags));
  }

  // Move required fields out of vertical tabs.
  $reference_type = ReferenceType::load($reference->bundle());
  $required_fields = array_filter($reference_type->getFields(), function ($item) {
    return ($item['visible'] && $item['required']);
  });
  foreach ($required_fields as $field => $data) {
    $form[$field]['#group'] = 'content';
  }

  // Set custom title filter for html title field and hide existing title field.
  $form['html_title']['widget']['0']['#format'] = 'title_filter';
  $form['#attached']['library'][] = 'os_publications/drupal.os_publications';
  $form['title']['#access'] = FALSE;

  // Put the delete button at the end of the actions list.
  // Cancel button's weight is 30, this needs to be higher than that.
  $form['actions']['delete']['#weight'] = 100;

  // Publication details group.
  $form['publication_details'] = [
    '#type' => 'details',
    '#title' => t('Publication Details'),
    '#group' => 'content',
    '#weight' => 65,
  ];
  $form['full_text']['#group'] = 'publication_details';
  $form['notes']['#group'] = 'publication_details';
  $form['field_publication_image']['#group'] = 'publication_details';
  $form['field_extra_fields']['#group'] = 'publication_details';

  // Publishing options group.
  $form['publishing_options'] = [
    '#type' => 'details',
    '#title' => t('Publishing Options'),
    '#group' => 'advanced',
    '#weight' => 1,
  ];
  $form['status']['#group'] = 'publishing_options';
  $form['status']['widget']['value']['#title'] = t('Published to this site');
  $form['is_sticky']['#group'] = 'publishing_options';
  $form['noindex']['#group'] = 'publishing_options';

  // Url group.
  $form['path']['widget']['0']['#group'] = 'advanced';
  $form['path']['widget']['0']['#weight'] = 2;

  // Distribute to repos group.
  $form['distribute_to_repos'] = [
    '#type' => 'details',
    '#title' => t('Distribute to Academic Repositories'),
    '#group' => 'advanced',
    '#weight' => 4,
  ];
  $form['distribution']['#group'] = 'distribute_to_repos';

  // Authoring information group.
  $form['authoring_info'] = [
    '#type' => 'details',
    '#title' => t('Post Created/Edited By'),
    '#group' => 'advanced',
    '#weight' => 5,
  ];
  $form['created']['#group'] = 'authoring_info';
  $form['uid']['#group'] = 'authoring_info';

  // Revision information group.
  if ($reference->id()) {
    // Revision checkbox and log message title change.
    $form['revision']['#title'] = t('When checked, a new version of this content will be created');
    $form['revision']['#default_value'] = TRUE;
    $form['revision_log_message']['widget']['0']['value']['#title'] = t('Revision Notes');
    // Revision info changes.
    $form['revision_information']['#group'] = 'advanced';
    $form['revision_information']['#type'] = 'details';
    $form['revision_information']['#title'] = t('Revision Information');
    $form['revision_information']['#weight'] = 6;

    // Get number of revisions for this publication.
    $rev_query = Drupal::database()->select('bibcite_reference_revision', 'rev')
      ->fields('rev', ['id'])
      ->condition('id', $reference->id());
    $num_revisions = count($rev_query->execute()->fetchAll()) - 1;
    if ($num_revisions > 0) {
      $revisions_url = Url::fromRoute('entity.bibcite_reference.version_history', ['bibcite_reference' => $reference->id()])
        ->setOption('attributes', ['id' => 'revisons-links']);
      $rev_link = Link::fromTextAndUrl(t("@num revisions", ['@num' => ' ' . $num_revisions]), $revisions_url)
        ->toString();
      $form['revision_information']['info']['#markup'] = '<p>' . t("There are currently") . $rev_link . '.</p>';
      $form['revision_information']['help'] = [
        '#type' => 'link',
        '#title' => t('What’s being stored as a revision?'),
        '#url' => Url::fromUri('https://help.theopenscholar.com/revisions'),
        '#weight' => 50,
      ];
    }
  }
  elseif (!$reference->id()) {
    unset($form['revision'], $form['revision_information'], $form['revision_log_message']);
  }

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'os_publications_bibcite_reference_form_submit';
    }

  }

  // Submit handle to match full name of a controbutor.
  $form_submit = $form['actions']['submit']['#submit'];
  // Should always be the first submit (before drupal default processing).
  array_unshift($form_submit, 'os_publications_detect_contributor_fullname');
  $form['actions']['submit']['#submit'] = $form_submit;

  // Year of publication alterations.
  $form['bibcite_year_group'] = [
    '#type' => 'fieldset',
    '#title' => $form['bibcite_year']['widget']['#title'] . ' <span class="form-required" title="' . t('This field is required.') . '"></span>',
    '#collapsible' => FALSE,
    '#weight' => $form['bibcite_year']['#weight'],
    '#group' => 'content',
    '#attributes' => [
      'class' => ['bibcite-year-coded-publication'],
    ],
  ];

  $form['bibcite_year_group']['bibcite_year'] = $form['bibcite_year'];
  $form['bibcite_year_group']['bibcite_year']['widget'][0]['value']['#attributes']['placeholder'] = t('Year');
  $form['bibcite_year_group']['bibcite_year']['#weight'] = 30;
  $form['bibcite_year_group']['bibcite_year']['#group'] = 'bibcite_year_group';
  $form['bibcite_year_group']['bibcite_year']['widget'][0]['value']['#required'] = FALSE;

  $visibility_condition = ['visible' => [':input[name="bibcite_year_coded"]' => ['value' => 0]]];
  $form['bibcite_year_group']['bibcite_year']['#states'] = $visibility_condition;

  // Adding date and month fields for publication day for Harvard - Chicago
  // Author citation.
  $vsite_style = $config_factory->get('default_style');
  $chicago_author_date_mode = FALSE;
  if ($vsite_style == 'harvard_chicago_author_date') {
    $chicago_author_date_mode = TRUE;
  }

  if ($chicago_author_date_mode) {
    $form['bibcite_year_group']['bibcite_year']['#title'] = t('Date of Publication');

    $form['bibcite_year_group']['year_selection'] = [
      '#type' => 'container',
      '#weight' => 25,
      '#prefix' => '<div class="year-selection-wrapper">',
      '#suffix' => '</div>',
      '#states' => $visibility_condition,
    ];

    $form['bibcite_year_group']['bibcite_year']['#group'] = 'year_selection';
    $form['bibcite_year_group']['publication_month'] = $form['publication_month'];
    $form['bibcite_year_group']['publication_day'] = $form['publication_day'];
    $form['bibcite_year_group']['publication_month']['widget']['#options']['_none'] = t('Month');
    $form['bibcite_year_group']['publication_day']['widget']['#options']['_none'] = t('Day');
    $form['bibcite_year_group']['bibcite_year']['#weight'] = -3;
    $form['bibcite_year_group']['publication_month']['#weight'] = -2;
    $form['bibcite_year_group']['publication_day']['#weight'] = -1;
    $form['bibcite_year_group']['publication_month']['#group'] = 'year_selection';
    $form['bibcite_year_group']['publication_day']['#group'] = 'year_selection';

    // Form element changes - wrap in a fieldset with the checkboxes element,
    // and fix additional attributes accordingly.
    unset(
      $form['bibcite_year_group']['publication_month']['widget']['#title'],
      $form['bibcite_year_group']['publication_day']['widget']['#title'],
      $form['publication_month'],
      $form['publication_day']
    );
  }
  else {
    // Form element changes - wrap in a fieldset with the checkboxes element,
    // and fix additional attributes accordingly.
    $form['bibcite_year_group']['bibcite_year']['#prefix'] = '<div class="year-wrapper">';
    $form['bibcite_year_group']['bibcite_year']['#suffix'] = '</div>';

    unset(
      $form['publication_month'],
      $form['publication_day']
    );
  }

  unset(
    $form['bibcite_year_group']['bibcite_year']['widget'][0]['value']['#title'],
    $form['bibcite_year_group']['bibcite_year']['widget'][0]['value']['#description'],
    $form['bibcite_year']
  );
  // Adding date and month validation message for Harvard - Chicago Author
  // citation.
  if ($chicago_author_date_mode) {
    $params['@year'] = date('Y');
    $form_validation_date_month = '<div id="biblio-month-group-validate">' . t('Permitted date formats: 2/10/@year, 2/@year, @year.', $params) . '</div>';
  }
  else {
    $form_validation_date_month = '';
  }
  // Add validation message for validating the field via JS.
  $form['bibcite_year_group']['#suffix'] = $form_validation_date_month . '<div id="bibcite-year-group-validate">' . t('Year must be in the form YYYY. Only numerical digits are allowed.') . '</div>';

  // Year and other field validations needs to happen before the standard
  // validation.
  array_unshift($form['#validate'], 'os_publications_validate_fields');

  // Adding submit handler to flip between the year and the date field.
  array_unshift($form['actions']['submit']['#submit'], 'os_publications_year_date_flip');

  /** @var array $years */
  $years = $config_factory->get('publications_years_text') ?? [];
  $default_year = 0;
  if (in_array($reference->bibcite_year->value, array_keys($years))) {
    $default_year = $reference->bibcite_year->value;
  }
  $form['bibcite_year_group']['bibcite_year_coded'] = [
    '#type' => 'radios',
    '#options' => [
      0 => t('Published'),
    ] + $years,
    '#multiple' => FALSE,
    '#weight' => 20,
    '#default_value' => $default_year,
    '#after_build' => ['os_publications_date_of_publication_alter'],
  ];

  // Publisher's version field changes.
  if (!$form['publishers_version']['widget'][0]['title']['#default_value']) {
    $form['publishers_version']['widget'][0]['title']['#default_value'] = t("Publisher's Version");
  }
  $form['publishers_version']['widget'][0]['title']['#weight'] = -1;
  $form['publishers_version']['widget'][0]['uri']['#description'] = t('If published or sold online, e.g. http://www.cambridge.org/isbn/1166158');
  $form['publishers_version']['widget'][0]['uri']['#title'] = t('Article URL');
  unset($form['publishers_version']['widget'][0]['#title']);

  // We are setting default value so this is necessary to avoid field widget
  // validation errors.
  array_unshift($form['publishers_version']['widget'][0]['#element_validate'], 'os_publication_empty_uri_validation');
  if ($form['bibcite_type_of_work']['widget'][0]['value']['#description'] == 'Masters Thesis') {
    $form['bibcite_type_of_work']['widget'][0]['value']['#description'] = '';
  }

  // Hide pmid field and identifier details tab if no other field exists in the
  // identifier group.
  $form['bibcite_pmid']['#access'] = FALSE;

  // Adding class to form.
  $form['#attributes']['class'][] = 'node-form';

  // Parse author name.
  $form['#attached']['library'][] = 'os_publications/drupal.os_publications.author';

  os_publications_bibcite_reference_form_add_menu_option($form, $form_state);

  os_publications_bibcite_reference_form_alter_metadata_access($form, $form_state);
  os_publications_hide_empty_tabs($form, [
    'publication',
    'identifiers',
    'authoring_info',
  ]);
}

/**
 * Set title to null if no uri entered so that no false form errors are thrown.
 *
 * @param array $element
 *   Publishers version form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function os_publication_empty_uri_validation(array &$element, FormStateInterface $form_state) {
  if ($element['uri']['#value'] === '') {
    $element['title']['#value'] = '';
  }
}

/**
 * After build callback.
 *
 * Change the element so we could place the published in the beginning of the
 * row and separate it with an 'or' text.
 */
function os_publications_date_of_publication_alter($element) {
  // Since the published year type is 0 the key of the published radio is 0.
  // Nothing special to wonder about.
  $element[0]['#weight'] = 0;
  $element[0]['#suffix'] = '<b>' . t('@sp1Or@sp2', ['@sp1' => ' ', '@sp2' => ' ']) . '</b>';
  return $element;
}

/**
 * Adding submit handler to flip between the year and the date field.
 */
function os_publications_year_date_flip($form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Config\ImmutableConfig $config_factory */
  $config_factory = \Drupal::service('config.factory')->get('os_publications.settings');

  // Swap the values.
  $values = $form_state->getValues();
  $years = $config_factory->get('publications_years_text');
  if ($values['bibcite_year_coded'] && isset($years[$values['bibcite_year_coded']])) {
    $form_state->setValue('bibcite_year', [['value' => $values['bibcite_year_coded']]]);
  }
}

/**
 * Validate handler/Verify year field value to avoid mismatch between.
 *
 * Text field and checkboxes.
 */
function os_publications_validate_fields($form, FormStateInterface $form_state) {

  /** @var \Drupal\Core\Config\ImmutableConfig $pub_config */
  $pub_config = \Drupal::service('config.factory')->get('os_publications.settings');
  $style = $pub_config->get('default_style');

  $values = $form_state->getValues();
  $years = $pub_config->get('publications_years_text');
  $pub_year = array_shift($values['bibcite_year'])['value'];

  // If published is selected on no year entered throw error.
  if (isset($years[$pub_year])) {
    return;
  }
  elseif ($values['bibcite_year_coded'] == 0 && !$pub_year) {
    $form_state->setErrorByName('bibcite_year', t('Year is mandatory'));
  }

  // Adding extra validation for date and month for Harvard - Chicago Author
  // citation.
  if ($style == 'harvard_chicago_author_date') {
    $pub_month = array_shift($values['publication_month'])['value'];
    $pub_day = array_shift($values['publication_day'])['value'];
    if (($pub_month || $pub_day) && !$pub_year) {
      $form_state->setErrorByName('bibcite_year', t('Year is mandatory'));
      return;
    }
    elseif ($pub_year && !is_numeric($pub_year) || is_numeric($pub_year) && ($pub_year < 1000 || $pub_year > 9999)) {
      $form_state->setErrorByName('bibcite_year', t('Year value must be in a YYYY format.'));
      return;
    }
    elseif (($pub_month && $pub_day) && !os_publications_validate_date_fields($pub_month, $pub_day, $pub_year)) {
      $form_state->setErrorByName('publication_month', t('Date must be valid.'));
      $form_state->setErrorByName('publication_day');
      $form_state->setErrorByName('bibcite_year');
      return;
    }
  }
  else {
    // Validate a year is numeric and that it's only four digits long.
    if ($pub_year && !is_numeric($pub_year) || is_numeric($pub_year) && ($pub_year < 1000 || $pub_year > 9999)) {
      $form_state->setErrorByName('bibcite_year', t('Year value must be in a YYYY format.'));
      return;
    }
  }
}

/**
 * Validate Month, Day and Year inputs.
 */
function os_publications_validate_date_fields($month, $day, $year) {
  $month_series_odd = [1, 3, 5, 7, 8, 10, 12];
  $month_series_even = [4, 6, 9, 11];
  if ((($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0) && $month == 2 && $day <= 29) {
    // Check Leap years.
    return TRUE;
  }
  elseif ($month == 2 && $day <= 28) {
    // Check February for non-leap years.
    return TRUE;
  }
  elseif ((in_array($month, $month_series_odd) && $day <= 31) || (in_array($month, $month_series_even) && $day <= 30)) {
    // Check remaining months.
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function os_publications_bibcite_reference_insert(EntityInterface $entity) {
  $is_published = $entity->get('status')->getValue();

  if ($is_published[0]['value']) {
    /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
    $type = \Drupal::service('os_publications.manager_citation_distribute');
    $type->distribute($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function os_publications_bibcite_reference_update(EntityInterface $entity) {
  $is_published = $entity->get('status')->getValue();

  if ($is_published[0]['value']) {
    /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
    $type = \Drupal::service('os_publications.manager_citation_distribute');
    $type->distribute($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function os_publications_bibcite_reference_delete(EntityInterface $entity) {
  $is_published = $entity->get('status')->getValue();

  if ($is_published[0]['value']) {
    /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
    $type = \Drupal::service('os_publications.manager_citation_distribute');
    $type->conceal($entity);
  }
}

/**
 * Implements hook_repec_template_alter().
 */
function os_publications_repec_template_alter(array &$data, ContentEntityInterface $entity) {
  /** @var \Drupal\os_publications\RepecHelperInterface $repec_helper */
  $repec_helper = new RepecHelper($entity);
  /** @var \Drupal\bibcite_entity\Entity\ContributorInterface[] $contributors */
  $contributors = $repec_helper->getContributor();

  foreach ($contributors as $contributor) {
    $data[] = [
      'attribute' => 'Author-Name',
      'value' => $contributor->getName(),
    ];
  }

  /** @var \Drupal\bibcite_entity\Entity\KeywordInterface[] $keywords */
  $keywords = $repec_helper->getKeywords();

  if ($keywords) {
    $keywords_as_text = array_map(function (KeywordInterface $keyword) {
      return $keyword->getName();
    }, $keywords);

    $data[] = [
      'attribute' => 'Keywords',
      'value' => implode(', ', $keywords_as_text),
    ];
  }
}

/**
 * Implements hook_repec_template_SERIES_alter().
 */
function os_publications_repec_template_ecbook_alter(array &$data, ContentEntityInterface $entity) {
  /** @var array $publisher */
  $publisher = $entity->get('bibcite_publisher')->getValue();

  if ($publisher) {
    $data[] = [
      'attribute' => 'Provider-Name',
      'value' => $publisher[0]['value'],
    ];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function os_publications_form_bibcite_reference_confirm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only act on bibcite_reference delete confirmation forms.
  if (strpos($form_id, '_delete_form') === FALSE) {
    return;
  }

  $form['actions']['submit']['#submit'][] = 'os_publications_alter_post_bibcite_reference_delete_redirect';
}

/**
 * Alters redirect location after a bibcite_reference is deleted.
 *
 * @ingroup forms
 */
function os_publications_alter_post_bibcite_reference_delete_redirect(array &$form, FormStateInterface $form_state) {
  $form_state->setRedirect('view.publications.page_1');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function os_publications_preprocess_bibcite_citation(&$variables) {

  $citation_styler = \Drupal::service('bibcite.citation_styler');
  $site_wide_style = $citation_styler->getStyle()->id();
  $publications_config = \Drupal::configFactory()->get('os_publications.settings');
  $vsite_style = $publications_config->get('default_style') ?? $site_wide_style;

  // Change sitewide config for rendering citation.
  $citation_styler->setStyleById($vsite_style);

  /** @var \Drupal\bibcite_entity\Entity\Reference $publication */
  $publication = $variables['data']['entity'];
  // Checking publication->id() as well to make sure it is not Preview mode.
  if ($publication && $publication->id()) {
    $text = Markup::create($publication->html_title->value);
    $link = $publication->toLink($text)->toString();
    $variables['data']['title'] = $link;
  }

  // Map the numbers back to text.
  $years = $publications_config->get('publications_years_text');
  if (in_array($publication->bibcite_year->value, array_keys($years)) && $publication->bibcite_year->value != 0) {
    $variables['data']['issued']['date-parts'] = [[
      $years[$publication->bibcite_year->value],
    ],
    ];
    $variables['data']['issued']['literal'] = $years[$publication->bibcite_year->value];
  }

  // Alteration for hca style to match D7.
  if ($vsite_style == 'harvard_chicago_author_date') {
    if ($variables['data']['type'] == 'article-journal' || $variables['data']['type'] == 'chapter') {
      \Drupal::service('os_publications.citation_helper')->alterAuthors($variables['data']);
    }
  }

  /** @var \Drupal\bibcite\CitationStylerInterface $styler */
  $styler = \Drupal::service('bibcite.citation_styler');
  $data = $variables['data'];

  // If more than one author or editor , remove extra commas.
  $markup = str_replace(' ,', '', $styler->render($data));

  if ($vsite_style == 'harvard_chicago_author_date') {
    $pub_year = $publication->bibcite_year->value;
    $pub_month = $publication->publication_month->value;
    $pub_day = $publication->publication_day->value;
    // Pushing day and month in those both are present in Publication for
    // Harvard - Chicago Author cititation.
    if (($pub_year) && strpos($markup, $pub_year) !== FALSE && ($pub_month)) {
      // In case day value is present.
      if ($pub_day) {
        $day = $pub_day . '/';
      }
      else {
        $day = '';
      }
      $markup = str_replace($pub_year, $pub_month . '/' . $day . $pub_year, $markup);
    }
  }

  $variables['content'] = [
    '#markup' => $markup,
    '#cache' => [
      'tags' => ['publication_citation'],
    ],
  ];

  // Put site wide config back to default style.
  $citation_styler->setStyleById($site_wide_style);

  // Get current route name.
  $route_name = \Drupal::routeMatch()->getRouteName();
  // If it is publication view page and shorten url setting is on,
  // add a shortented url to the citation.
  if ($publications_config->get('shorten_citations') && $route_name === 'entity.bibcite_reference.canonical') {
    $current_uri = \Drupal::request()->getUri();
    $url_text = shorten_url($current_uri);
    $url = Url::fromUri($url_text);
    $short_url = Link::fromTextAndUrl($url_text, $url)->toString();

    // Get entity id to be passed to export button.
    $id = \Drupal::routeMatch()->getParameter('bibcite_reference')->id();
    // Append additional links to the citation.
    $variables['content']['#markup'] .= '<span class="short-link">' . t("Copy at") . "&nbsp;$short_url" . '</span>';

    // Get export button render array , get it's html and append to citation.
    $export_array = \Drupal::service('os_publications.citation_helper')->getCitationDownloadButton($id);
    $vsite = \Drupal::service('vsite.context_manager')->getActiveVsite();
    if ($export_array && $vsite) {
      $export_button = \Drupal::service('renderer')->render($export_array);
      $variables['content']['#markup'] .= $export_button;
      $variables['content']['#allowed_tags'] = [
        'a', 'button', 'ul', 'li', 'span', 'div', 'em', 'sub', 'sup',
      ];
    }
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function os_publications_editor_js_settings_alter(array &$settings) {
  // Badly affects the citation output if not set to false.
  $settings['editor']['formats']['title_filter']['editorSettings']['autoParagraph'] = FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function os_publications_bibcite_reference_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $mode = $display->getMode();
  if ($mode === 'teaser' || $mode === 'slide_teaser') {
    // Check note in teaser setting and unset it if setting is off.
    $publications_config = \Drupal::configFactory()->get('os_publications.settings');
    $note_in_teaser = $publications_config->get('note_in_teaser');
    if (!$note_in_teaser) {
      unset($build['notes']);
    }
    $build['bibcite_abst_e']['#title'] = Link::fromTextAndUrl('Abstract', Url::fromUri('internal:#'));
    // Do not remove, important for proper citation rendering.
    $build['citation']['#data']['entity'] = $entity;
    $build['#attached']['library'][] = 'os_publications/drupal.os_publications.misc';
  }

  // If publication has pmid entered, show pubmed link.
  if ($mode === 'citation') {
    // Last updated on information.
    $changed = $entity->changed->value;
    $build['changed'] = [
      '#markup' => '<span class="last-updated"><em>' . t("Last updated on@sp", ['@sp' => ' ']) . \Drupal::service('date.formatter')->format($changed, 'custom', 'm/d/Y') . '</em></span></br>',
      '#weight' => 14,
    ];

    if ($build['#bibcite_reference']->bibcite_pmid->value) {
      // Use bibcite module's bibcite link plugin to generate the pubmed link.
      $manager = \Drupal::service('plugin.manager.bibcite_link');
      $instance = $manager->createInstance('pubmed');
      if ($link = $instance->build($entity)) {
        $build['pubmed_link'] = [
          '#markup' => '<span class = "citation-links-pubmed">' . \Drupal::service('renderer')->render($link) . '</span>',
          '#weight' => 15,
        ];
      }
    }
    // Do not remove, important for proper citation rendering.
    $build['citation']['#data']['entity'] = $entity;
  }
}

/**
 * Submit handler to process Contributor based on full name as well.
 */
function os_publications_detect_contributor_fullname(&$form, FormStateInterface $formState) {
  $contributor_helper = \Drupal::service('os_publications.contributor_helper');
  $values = $formState->getValues();
  $contributors = $values['author'] ?? [];
  if (isset($contributors['add_more'])) {
    unset($contributors['add_more']);
  }

  foreach ($contributors as $key => $contributor) {
    $contributor_info = $contributor['target_id'];
    if (isset($contributor_info['entity']) && $contributor_entity = $contributor_info['entity']) {
      $existing_contributor = $contributor_helper->getByProps($contributor_entity);

      if ($existing_contributor) {
        $contributors[$key]['target_id'] = $existing_contributor->id();
      }
    }
  }

  $formState->setValue('author', $contributors);
}

/**
 * Handles extra submit operations for publications.
 */
function os_publications_bibcite_reference_form_submit(&$form, FormStateInterface $formState) {
  $values = $formState->getValues();
  $reference = $formState->getFormObject()->getEntity();
  /** @var \Drupal\cp_menu\MenuHelperInterface $menu_helper */
  $menu_helper = \Drupal::service('cp_menu.menu_helper');
  /** @var \Drupal\group\Entity\GroupInterface $vsite */
  $vsite = \Drupal::service('vsite.context_manager')->getActiveVsite();

  if ($vsite) {
    $menu_helper->publicationInFormMenuAlterations($values, $reference, $vsite);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function os_publications_preprocess_field(&$variables) {
  // If abstract field hide the item at first on publication view page.
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ((strpos($route_name, 'view.publications') !== FALSE) && $variables['field_name'] == 'bibcite_abst_e') {
    $field = $variables['items'];
    $field = array_shift($field);
    $field['attributes']->setAttribute('class', ['visually-hidden', 'abstract--content']);
  }
}

/**
 * Unset empty details tabs in bibcite reference form.
 *
 * @param array $form
 *   The form.
 * @param array $group_names
 *   The tab names to check.
 */
function os_publications_hide_empty_tabs(array &$form, array $group_names) {
  foreach ($group_names as $group_name) {
    $keep_group = FALSE;

    foreach ($form as $element) {
      if (is_array($element) && isset($element['#group']) && $element['#group'] === $group_name && $element['#access'] !== FALSE) {
        $keep_group = TRUE;
      }
    }
    if (!$keep_group) {
      $form[$group_name]['#access'] = FALSE;
    }
  }
}

/**
 * Adds menu option to reference form.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Drupal form state.
 */
function os_publications_bibcite_reference_form_add_menu_option(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsite_context_manager */
  $vsite_context_manager = \Drupal::service('vsite.context_manager');
  /** @var \Drupal\group\Entity\GroupInterface|null $active_vsite */
  $active_vsite = $vsite_context_manager->getActiveVsite();

  if (!$active_vsite) {
    return;
  }

  /** @var \Drupal\cp_menu\MenuHelperInterface $menu_helper */
  $menu_helper = \Drupal::service('cp_menu.menu_helper');
  /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $reference */
  $reference = $form_state->getFormObject()->getEntity();
  /** @var \Drupal\Core\Session\AccountInterface $current_user */
  $current_user = \Drupal::currentUser();
  /** @var bool $has_manage_menu_access */
  $has_manage_menu_access = $active_vsite->hasPermission('manage_menu', $current_user);

  $defaults = $menu_helper->getMenuLinkDefaults($reference, $active_vsite);
  $vsite_menus = $menu_helper->getVsiteMenuOptions($active_vsite);

  $form['menu'] = [
    '#type' => 'details',
    '#title' => t('Menu settings'),
    '#group' => 'advanced',
    '#attached' => [
      'library' => ['menu_ui/drupal.menu_ui'],
    ],
    '#tree' => TRUE,
    '#weight' => 3,
    '#attributes' => ['class' => ['menu-link-form']],
    '#access' => $has_manage_menu_access,
  ];

  $form['menu']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Provide a menu link'),
    '#default_value' => (int) (bool) $defaults['id'],
  ];
  $form['menu']['link'] = [
    '#type' => 'container',
    '#parents' => ['menu'],
    '#states' => [
      'invisible' => [
        'input[name="menu[enabled]"]' => ['checked' => FALSE],
      ],
    ],
  ];

  // Populate the element with the link data.
  foreach (['id', 'entity_id'] as $key) {
    $form['menu']['link'][$key] = ['#type' => 'value', '#value' => $defaults[$key]];
  }

  $form['menu']['link']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Menu link title'),
    '#default_value' => $defaults['title'],
    '#maxlength' => $defaults['title_max_length'],
  ];

  $form['menu']['link']['description'] = [
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => $defaults['description'],
    '#description' => t('Shown when hovering over the menu link.'),
    '#maxlength' => $defaults['description_max_length'],
  ];

  $form['menu']['link']['menu_parent'] = [
    '#type' => 'select',
    '#title' => t('Which Menu'),
    '#description' => t('Select the menu where you would like this link to appear. Some menus may not show on your page if they are not included in your Page Layout.'),
    '#options' => $vsite_menus,
    '#default_value' => $defaults['menu_name'],
    '#attributes' => [
      'class' => ['menu-parent-select'],
    ],
  ];
}

/**
 * Alters access to metadata in reference form.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function os_publications_bibcite_reference_form_alter_metadata_access(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsite_context_manager */
  $vsite_context_manager = \Drupal::service('vsite.context_manager');
  /** @var \Drupal\group\Entity\GroupInterface|null $active_vsite */
  $active_vsite = $vsite_context_manager->getActiveVsite();

  if (!$active_vsite) {
    return;
  }

  /** @var \Drupal\Core\Session\AccountInterface $current_user */
  $current_user = \Drupal::currentUser();
  /** @var bool $has_administer_reference_access */
  $has_administer_reference_access = $active_vsite->hasPermission('administer bibcite_reference', $current_user);
  /** @var bool $has_create_alias_access */
  $has_create_alias_access = $active_vsite->hasPermission('create url aliases', $current_user);

  $form['created']['#access'] = $has_administer_reference_access;
  $form['uid']['#access'] = $has_administer_reference_access;
  $form['path']['widget']['0']['#access'] = $has_create_alias_access;
  $form['path']['#access'] = $has_create_alias_access;
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function os_publications_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
  $params = $route_match->getParameters();
  if ($params->has('view_id') && $params->get('view_id') == "publications") {
    $links = $breadcrumb->getLinks();

    if (count($links) > 2) {
      unset($links[1]);
    }

    // Creating new breadcrumb.
    $breadcrumb = new Breadcrumb();
    $breadcrumb->setLinks(array_values($links));
  }
}
