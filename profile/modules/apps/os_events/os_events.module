<?php

/**
 * @file
 * Customisations for Os Events.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\date_recur\DateRecurHelper;
use Drupal\date_recur_modular\DateRecurModularWidgetOptions;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\rng\Entity\Registration;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_menu_local_tasks_alter().
 */
function os_events_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {

  $node = Drupal::routeMatch()->getParameter('node');
  $node = is_numeric($node) ? \Drupal::entityTypeManager()->getStorage('node')->load($node) : $node;

  if ($node && $node->access('update') !== TRUE) {
    return;
  }

  if ($node instanceof NodeInterface && $node->bundle() == 'events') {
    if (isset($data['tabs'][0])) {
      foreach ($data['tabs'][0] as $task => $tab) {
        if (strpos($task, 'rng') !== FALSE && !$node->field_signup->value) {
          unset($data['tabs'][0][$task]);
        }
        unset($data['tabs'][0]['rng.local_tasks:rng.event.node.register.type_list']);
        if (strpos($task, 'rng.event.node.event') !== FALSE) {
          $data['tabs'][0][$task]['#link']['title'] = t("Manage Registrations");
        }
        if ($task == 'views_view:view.rng_registrations_node.page_1') {
          unset($data['tabs'][0][$task]);
        }
      }
    }
    if (isset($data['tabs'][1])) {
      unset(
        $data['tabs'][1]['rng.local_tasks:rng.event.node.event.access'],
        $data['tabs'][1]['rng.local_tasks:rng.event.node.event.group.list'],
        $data['tabs'][1]['rng_date_scheduler.local_tasks:rng.event.node.event.date_scheduler'],
        $data['tabs'][1]['rng.local_tasks:rng.event.node.event.messages']
      );
    }
  }
  // Remove Edit and Identities local tasks from Registration view page.
  if ($route_name == 'entity.registration.canonical') {
    $to_remove = ['entity.registration.edit', 'entity.registration.registrants'];
    if (isset($data['tabs'][0])) {
      foreach ($data['tabs'][0] as $task => $tab) {
        if (in_array($task, $to_remove)) {
          unset($data['tabs'][0][$task]);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function os_events_node_update(EntityInterface $node) {
  if ($node->bundle() != 'events') {
    // Bail out if not an event node.
    return;
  }
  $container = Drupal::getContainer();
  $mailService = $container->get('os_events.mail_notifications');

  // Get the registrations associated with this event.
  $eventMeta = $container->get('rng.event_manager')->getMeta($node);
  $registrations = $eventMeta->getRegistrations();

  // If node is unpublished or Signup disabled,
  // delete registrations and send cancel mail.
  if (!$node->status->value || !$node->field_signup->value) {
    $mailService->sendCancelNotificationEmail($node);
    $mailService->disableReminderEmail($node);
    foreach ($registrations as $registration) {
      $registration->delete();
    }
  }

  // Get dates to see if they are changed.
  $originalDate = $node->original->field_recurring_date->value;
  $newDate = $node->field_recurring_date->value;

  // Get the location to see if it is changed.
  $originalLocation = $node->original->field_location->value;
  $newLocation = $node->field_location->value;

  // If recurring event's date is changed, delete all registrations.
  if ($node->field_recurring_date->rrule) {
    if ($originalDate !== $newDate) {
      foreach ($registrations as $registration) {
        $registration->delete();
      }
      return;
    }
    // If only location changed for recurring event send update email.
    if ($originalLocation !== $newLocation) {
      $mailService->sendUpdateNotificationEmail($node);
    }
  }
  // If non-recurring event is changed, send update email.
  if (!$node->field_recurring_date->rrule) {
    if ($originalLocation !== $newLocation || $originalDate !== $newDate) {
      $mailService->sendUpdateNotificationEmail($node);
    }
    // If date changed, update the registration entity too.
    if ($originalDate !== $newDate) {
      $newDate = $container->get('date.formatter')->format(strtotime($newDate), 'custom', DateTimeItemInterface::DATETIME_STORAGE_FORMAT);
      foreach ($registrations as $registration) {
        $registration->field_for_date->value = $newDate;
        $registration->save();
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function os_events_node_predelete(EntityInterface $node) {
  if ($node->bundle() != 'events') {
    // Bail out if not an event node.
    return;
  }

  $container = Drupal::getContainer();
  $service = $container->get('os_events.mail_notifications');
  $service->sendCancelNotificationEmail($node);
  $service->disableReminderEmail($node);

}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function os_events_node_presave(EntityInterface $entity) {
  if ($entity->bundle() != 'events') {
    // Bail out if not an event node.
    return;
  }
  $email = $entity->getOwner()->getEmail();
  $entity->rng_reply_to->value = ($entity->rng_reply_to->value) ?? $email;
  $entity->rng_capacity->value = ($entity->rng_capacity->value) ?? 'unlimited';

  // Make sure reminder checkbox and reminder schedule is in sync.
  if (!$entity->status->value || !$entity->field_signup->value) {
    $entity->field_should_send_reminder->value = 0;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function os_events_registrant_insert(EntityInterface $registrant) {
  $container = Drupal::getContainer();
  $default_template = $container->get('os_events.mail_notifications');
  $default_template->sendConfirmationEmail($registrant);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function os_events_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() != 'events' || !$entity->field_signup->value || !$entity->field_recurring_date->value || !$entity->rng_status->value) {
    return;
  }

  $id = $entity->id();
  $date_switch = [];
  $another_link = '';
  $data = Drupal::service('os_events.registrations_helper')->anotherDateLink($build);

  if ($data) {
    $date_switch = $data['date_switch'];
    $another_link = $data['another_link'];
  }

  // Registration link.
  $build['registration_signup']['#markup'] = '<div id="registration-link-' . $id . '">' . t("Registration:@s", ['@s' => ' ']) .
      os_events_generate_modal_register_link($build) . $another_link . '</div>';
  $build['registration_signup']['#weight'] = 20;
  if ($date_switch) {
    $build['registration_signup_dates'] = [
      '#types' => 'form',
      'form' => $date_switch,
      '#weight' => 21,
    ];
    $build['#attached']['library'][] = 'os_events/os_events.toggle';
  }
}

/**
 * Generate Registration link.
 *
 * @param array $build
 *   The page build.
 *
 * @return string
 *   The Signup link.
 */
function os_events_generate_modal_register_link(array $build) {
  $data = Drupal::service('os_events.registrations_helper')->checkRegistrationStatus($build);
  $nid = $build['#node']->id();

  if (!isset($data['message'])) {
    $url = Url::fromRoute('os_events.signup_modal_form', ['nid' => $nid, 'timestamp' => $data['timestamp']], [
      'attributes' => [
        'class' => ['use-ajax'],
        'data-dialog-type' => 'modal',
        'data-dialog-options' => json_encode(['width' => '100%']),
        'id' => 'events_signup_modal_form',
      ],
    ]);
    $link = Link::fromTextAndUrl('Signup for this event', $url)->toString();
    return $link;
  }
  return $data['message'];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function os_events_form_rng_event_settings_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form['event']['field_send_reminder']['#states'] = [
    'visible' => [
      ':input[name="field_should_send_reminder[value]"]' => [
        'checked' => TRUE,
      ],
    ],
  ];
  $form['#validate'][] = 'os_events_signup_settings_validate';
  $form['#submit'][] = 'os_events_set_reminder';
}

/**
 * Sets the reminder for a particular date.
 */
function os_events_set_reminder($form, FormStateInterface $form_state) {
  $node = $form_state->getStorage()['event'];
  $values = $form_state->getValues();
  $container = Drupal::getContainer();
  $service = $container->get('os_events.mail_notifications');
  if ($values['field_should_send_reminder']['value']) {
    $service->setUpReminderEmail($values, $node);
  }
  elseif (!$values['field_should_send_reminder']['value']) {
    // Remove reminder if send reminder disabled.
    $service->disableReminderEmail($node);
  }
}

/**
 * Validates Event rng settings form.
 *
 * @param array $form
 *   The rng event settings form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The rng event settings form state.
 */
function os_events_signup_settings_validate(array &$form, FormStateInterface &$form_state) {

  $open_date = $form_state->getValue('field_open_date');
  $close_date = $form_state->getValue('field_close_');
  $open_date = array_shift($open_date);
  $close_date = array_shift($close_date);
  $node = Drupal::routeMatch()->getCurrentRouteMatch()->getParameter('node');
  $event_start_date = $node->field_recurring_date->value;
  $event_start_date = DrupalDateTime::createFromTimestamp(strtotime($event_start_date));

  if ($open_date['value'] > $event_start_date) {
    $form_state->setErrorByName('field_open_date', t("The Open date must be lesser than the Event Start date: @sd",
        ['@sd' => $event_start_date]));
  }
  if ($close_date['value'] && $close_date['value'] < $open_date['value']) {
    $form_state->setErrorByName('field_close_', t("The Close date must be greater than the Open date"));
  }
}

/**
 * Implements hook_views_pre_render().
 */
function os_events_views_pre_render(ViewExecutable $view) {
  if ($view->storage->id() == 'calendar') {

    $view->element['#attached']['library'][] = 'os_fullcalendar/drupal.os_fullcalendar';
    // Renders teaser mode of node on upcoming and past tabs
    // which loads only event node's titles by default.
    foreach ($view->result as $value) {
      $nid = $value->_entity->nid->value;
      $entity_type = 'node';
      $view_mode = 'teaser';
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity_type);
      $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
      $node = $storage->load($nid);
      $build = $view_builder->view($node, $view_mode);
      $output = \Drupal::service('renderer')->renderRoot($build);

      $view->element['#attached']['drupalSettings']['os_events']['node'][$nid] = $output;
      $dateTime = new DrupalDateTime();
      $view->element['#attached']['drupalSettings']['os_events']['offsetInM'] = $dateTime->getOffset();
      $view->element['#attached']['drupalSettings']['os_events']['offsetInHm'] = $dateTime->format('P');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the Registration filter by date field.
 */
function os_events_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // If not the view we are looking, move on.
  if ($form['#id'] != 'views-exposed-form-rng-registrations-node-page-1') {
    return FALSE;
  }
  $node = Drupal::requestStack()->getCurrentRequest()->get('node');
  $nid = $node->id();

  // Get occurrences.
  $results = Drupal::service('os_events.registrations_helper')->getOccurrences($nid);

  // Start building out the options for our select list.
  $options = [];

  // Push event start date into the results array.
  $event_start_date = new \stdClass();
  $event_start_date->field_recurring_date_value = $node->field_recurring_date->value;
  array_unshift($results, $event_start_date);

  foreach ($results as $date) {
    $dateTimeObject = new DrupalDateTime($date->field_recurring_date_value);
    $dateString = $dateTimeObject->format('Y-m-d H:i:s');
    $options[$dateString] = $dateTimeObject->format('l, F j, Y');
  }

  // Start building out our new form element.
  $date_field = 'field_for_date_value';
  $form[$date_field]['#type'] = 'select';
  $form[$date_field]['#multiple'] = FALSE;

  // Specify the empty option for our select list.
  $form[$date_field]['#empty_option'] = t('-Select a specific occurrence-');

  // Add the $options from above to our select list.
  $form[$date_field]['#options'] = $options;
  unset($form[$date_field]['#size']);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * HOOK: 'os_events_date_recur_modular_sierra_widget'.
 */
function os_events_preprocess_os_events_date_recur_modular_sierra_widget(array &$variables): void {
  $variables['attributes']['class'][] = 'date-recur-modular-sierra-widget';
  $variables['#attached']['library'][] = 'date_recur_modular/date_recur_modular_sierra_widget';
}

/**
 * Implements hook_theme().
 */
function os_events_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'os_events_date_recur_modular_sierra_widget' => [
      'render element' => 'widget',
    ],
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function os_events_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (($context['items']->getName() != 'field_recurring_date')) {
    return;
  }
  $element['#theme'] = 'os_events_date_recur_modular_sierra_widget';

  $visibility = [
    ':input[name="field_recurring_date[0][recurrence_option]"]' =>
    [
      ['value' => 'daily'],
      ['value' => 'weekly_oneday'],
      ['value' => 'monthly_th_weekday'],
      ['value' => 'yearly_monthday'],
      ['value' => 'weekdayly'],
    ],
  ];

  $parts = [];
  $rule1 = NULL;
  $rrule = $element['rrule_in_storage']['#value'] ?? '';
  if (isset($rrule)) {
    $startDate = new \DateTime();
    try {
      $helper = DateRecurHelper::create($rrule, $startDate);
      $rules = $helper->getRules();
      $rule1 = count($rules) > 0 ? reset($rules) : NULL;
      $parts = $rule1 ? $rule1->getParts() : [];
      $service = Drupal::getContainer()->get('os_events.widget_helper');
      $getOption = $service->getRecurrenceOptions($rrule, $startDate);
      $element['recurrence_option']['#default_value'] = $getOption;
    }
    catch (\Exception $e) {
    }
  }

  $endsDate = NULL;
  try {
    $until = $parts['UNTIL'] ?? NULL;
    if (is_string($until)) {
      $endsDate = new \DateTime($until);
    }
    elseif ($until instanceof \DateTimeInterface) {
      $endsDate = $until;
    }
  }
  catch (\Exception $e) {
  }

  $count = $parts['COUNT'] ?? NULL;
  $endsModeDefault = NULL;
  if ($endsDate) {
    $endsModeDefault = DateRecurModularWidgetOptions::ENDS_MODE_ON_DATE;
  }
  elseif ($count > 0) {
    $endsModeDefault = DateRecurModularWidgetOptions::ENDS_MODE_OCCURRENCES;
  }

  $element['ends_mode'] = [
    '#type' => 'radios',
    '#title' => t('Ends'),
    '#options' => [
      DateRecurModularWidgetOptions::ENDS_MODE_ON_DATE => t('End on Date'),
      DateRecurModularWidgetOptions::ENDS_MODE_OCCURRENCES => t('End after'),
    ],
    '#default_value' => $endsModeDefault,
  ];
  $element['ends_mode'][DateRecurModularWidgetOptions::ENDS_MODE_ON_DATE]['#states']['visible'] = [$visibility];
  $element['ends_mode'][DateRecurModularWidgetOptions::ENDS_MODE_OCCURRENCES]['#states']['visible'] = [$visibility];

  $element['ends_count'] = [
    '#type' => 'number',
    '#title' => t('End after number of occurrences'),
    '#title_display' => 'invisible',
    '#field_suffix' => t('occurrences'),
    '#default_value' => $count ?? 1,
    '#min' => 1,
  ];
  $element['ends_count']['#states']['visible'][] = [$visibility];

  $element['ends_count']['#states']['enabled'][] = [
    // This applies correctly but Drupal has no theming for disabled dates.
    ':input[name="field_recurring_date[0][ends_mode]"]' => ['value' => DateRecurModularWidgetOptions::ENDS_MODE_OCCURRENCES],
  ];

  $element['ends_date'] = [
    '#type' => 'container',
  ];
  $element['ends_date']['#states']['visible'][] = [$visibility];

  $element['ends_date']['#states']['enabled'][] = [
    // This applies correctly but Drupal has no theming for disabled dates.
    ':input[name="field_recurring_date[0][ends_mode]"]' => ['value' => DateRecurModularWidgetOptions::ENDS_MODE_ON_DATE],
  ];
  $element['ends_date']['ends_date'] = [
    '#type' => 'datetime',
    '#default_value' => $endsDate ? DrupalDateTime::createFromDateTime($endsDate) : NULL,
  ];
}

/**
 * Implements hook_form_alter().
 */
function os_events_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_events_edit_form' || $form_id == 'node_events_form') {
    $visibility = [
      ':input[name="field_recurring_date[0][recurrence_option]"]' =>
        [
          ['value' => 'daily'],
          ['value' => 'weekly_oneday'],
          ['value' => 'monthly_th_weekday'],
          ['value' => 'yearly_monthday'],
          ['value' => 'weekdayly'],
        ],
    ];
    $form['field_singup_multiple']['#states']['visible'] = $visibility;
    array_unshift($form['actions']['submit']['#submit'], 'os_events_set_rrule');
  }
}

/**
 * Helps to alter the rrule to add limits or set defaults.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @throws Exception
 */
function os_events_set_rrule(array &$form, FormStateInterface $form_state) {

  $values = $form_state->getValues();
  $value_parents = $form['field_recurring_date']['widget'][0]['#parents'];
  $field_recurring_date = $values['field_recurring_date'];
  $field_recurring_date = array_shift($field_recurring_date);

  $not_applicable = ['', 'custom'];
  if (in_array($field_recurring_date['recurrence_option'], $not_applicable)) {
    return;
  }

  // Get the Rrule set already by this point.
  $rrule = $form_state->getValue(array_merge($value_parents, ['rrule']));
  // Service we need to alter the rrule.
  $service = Drupal::getContainer()->get('os_events.widget_helper');
  $rrule = $service->alterRrule($rrule, $field_recurring_date);

  // Set the altered rule so that it can be saved in DB.
  $form_state->setValue(array_merge($value_parents, ['rrule']), $rrule);
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function os_events_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() !== 'events') {
    return;
  }

  $startObj = DrupalDateTime::createFromTimestamp(strtotime($entity->get('field_recurring_date')->value));
  if ($display->getMode() !== 'teaser' && ($startObj->getTimestamp() > \Drupal::time()->getCurrentTime())) {
    // Using `#iconize` instead of `#icon` because then I would had to use
    // \Drupal\bootstrap\Bootstrap::glyphicon. This would couple the module with
    // theme.
    //
    $build['os_events'] = [
      '#theme' => 'item_list__os_dropdown',
      '#title' => [
        '#type' => 'button',
        '#value' => t('Export'),
        '#attributes' => [
          'data-toggle' => 'dropdown',
          'role' => 'button',
          'aria-haspopup' => 'true',
          'aria-expanded' => 'false',
        ],
      ],
      '#items' => [
        [
          '#type' => 'link',
          '#title' => t('RSS'),
          '#url' => Url::fromRoute('view.event_exportables.feed_1', [
            'arg_0' => $entity->id(),
          ]),
          '#iconize' => 'calendar',
        ],
        [
          '#type' => 'link',
          '#title' => t('iCal'),
          '#url' => Url::fromRoute('view.event_exportables.feed_2', [
            'arg_0' => $entity->id(),
          ]),
          '#iconize' => 'calendar',
        ],
        [
          '#type' => 'link',
          '#title' => t('Google'),
          '#url' => \Drupal::service('os_events.gcal_helper')->addToCalendarLink($entity),
          '#iconize' => 'calendar',
        ],
      ],
      '#list_type' => 'ul',
      '#attributes' => [
        'class' => ['dropdown-menu'],
      ],
      '#wrapper_attributes' => [
        'class' => ['dropdown'],
      ],
      '#weight' => 100,
    ];
  }

}

/**
 * Implements hook_entity_operation_alter().
 */
function os_events_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity instanceof Registration) {
    unset($operations['edit']);
  }
}
